using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Security;
using System.Text;
using System.Threading.Tasks;
using Microsoft.VisualBasic;


public interface IResults_Business
{
    bool FlagGoOn { get; set; }
    void AdjuntarAWF(ArrayList Results, long WFID);
    void AutocompleteIndexsNewDocument(ref INewResult newResult);
    void CloneIndexs(IResult r, IDocType DocType);
    void CompleteDocument(ref IResult _Result, bool loadIndexsList);
    void CompleteDocument(ref IResult _Result, DataRow dr);
    void ConvertToPdfFile(ref IResult Result, string pdfFolderPath, ref int CantPdfs);
    void copyFile(ref INewResult result);
    void CopyFileToTemp(IResult res, string rootPath, string destPath);
    void CopySubDirAndFilesBrowser(string copyTo, string copyFrom, string originalPath);
    void Delete(ref INewResult Result, bool delfile = true);
    void Delete(ref INewResult Result, bool delfile, ref ITransaction t);
    void Delete(ref IResult Result, bool delfile = true, bool saveAction = true);
    void DeleteFromZI(long lngDocID);
    void DeleteFromZWFI(long wI);
    void DeleteFromZWFII(long wI);
    void DeleteResultFromWorkflows(long docid);
    void DeleteSearchIndexData(long ResultId);
    void DeleteTempFiles();
    void DeleteWI(long wI);
    void Fill(ref IBaseImageFileResult instance);
    void Fill(ref INewResult instance);
    void Fill(ref Ipublishable instance);
    void Fill(ref IPublishState instance);
    void Fill(ref IResult instance);
    void Fill(ref ITaskResult instance);
    void Fill(ref IZambaCore instance);
    void Fill(ref IZBaseCore instance);
    void Fill(ref IZBatch instance);
    void getRelatedsResults(long idDocSelected, ref IResult relatedResultFinal);
    void HistoricDocumentDropzone(long taskID, string taskName, long docTypeId, string docTypeName, long stepId, long WorkId, string StepN);
    void InheritUsersToNotify(long oldResultId, long newResultId);
    void InsertDocFile(IResult res, byte[] file, string fileName);
    void InsertIntoDOCB(IResult res);
    void InsertSearchIndexData(IResult result);
    void InsertSearchIndexData(IResult result, ref ITransaction t = null/* TODO Change to default(_) if this is not a reference type */);
    void LoadFileFromDB(ref IResult res);
    void LoadVolume(ref INewResult result);
    void MoveTempFiles(long DocTypeId);
    void RemoveDocTypeWF(int DocTypeID);
    void ReplaceDocument(ref IResult Result, string NewDocumentFile, bool ComeFromWF, ITransaction t);
    void ResultUpdated(long DocTypeId, long ResultId);
    void SaveModifiedIndexData(ref IResult result, bool reIndexFlag, bool changeEvent, List<long> OnlySpecifiedIndexsids, DataTable dtModifiedIndex);
    void SaveVersionComment(ref INewResult Result);
    void SetVersionComment(long rID, string rComment);
    void UpdateAutoName(ref IResult Result, bool ChNomC = false);
    void UpdateDocFile(ref IResult Result, string docfile);
    void UpdateLastResultVersioned(long doctypeId, long parentid);
    void UpdateOriginalName(long DocTypeId, long DocId, string strOriginalName);
    void UpdateResultsVersionedDataWhenDelete(long DocTypeid, long parentid, long docid, long RootDocumentId);
    DataSet AllReport(long userid);
    bool AsociateIncomingResult(long _InsertID, long _DTID, long _DocID, DateTime _IDate, long[] _IID, string[] _IValue);
    string BuildMailWaitingDocument(long lngWaitID);
    INewResult CloneResult(IResult originalResult, string filename, bool GenerateIds, bool FlagInsertar = false);
    bool CopyBlobToVolumeWS(long docId, long docTypeId);
    int CountChildsVersions(long DocTypeid, long parentid);
    object DeletMigracionObservaciones(long EntitiId, long AtributeId);
    bool ExistsInOtherWFs(ref int ResultID);
    bool exportarResultPDF(ref IResult Result, string sPdf);
    List<IIndex> FillIndexData(long EntityId, long Id, List<IIndex> Indexs, bool inThread = false);
    IIndex findIn(List<IIndex> Indexs, IIndex pIndex);
    DataTable GetAllEntities();
    DataTable GetAsociatedToEditTable(long idReclamo, long idParent, long docTypeId, long associatedId, long idParentColumnName, Dictionary<long, string> indexs, long formEntityID);
    DataTable getAssociatedBaremos(long idReclamo, long idBaremoMuerte);
    byte[] GetBlob(long docId, long docTypeId, long userid);
    DataTable GetCalendarRslt(string entityId, string titleAttribute, string startAttribute, string endAttribute, string filterColumn, string filterValue);
    bool GetCountOfBaremoIndex(long id, string indexName);
    string GetCreatorUser(long docid);
    DataTable getDataFromHerarchicalParent(long parentTagValue);
    DataTable getDataFromHerarchicalParent(long parentTagValue, List<string> indexs, string tableId, bool isView);
    List<long> GetDocIDsFromZI(long docType);
    DataSet GetDocRelations();
    List<long> GetDocTypesZWFI(long ruleID);
    DataSet GetDocumentData(DataSet ds, IDocType dt, int i);
    DataTable getEntidadObservaciones();
    int GetExtensionId(string File);
    int GetFileIcon(string File);
    string GetFullName(long resultId, long docTypeId);
    string GetHtmlLinkFromResult(long rDocTypeId, long rId);
    int GetIcon(string Extension);
    DataTable GetIdsFromABaremoMuerte(long baremoDocId);
    DataTable GetIdsToAsociatedParents(long docID, long asociatedID, long formID);
    DataTable GetIndexByAssociateIndex(int DocTypeId, int DocId);
    DataTable GetIndexForEntities(long IndexId);
    List<long> GetIndexIDsFromZWFII(long wI);
    DataTable GetIndexObservaciones(long indexId, long entityId, long parentResultId, string InputObservacion, string Evaluation);
    string GetIndexValueFromDoc_I(long docType, long docID, long indexID);
    string GetIndexValueFromZWFII(long wI, long indexID);
    int GetInitialStep(short WFID);
    List<long> GetInsertIDsWhereDocID(long lngDocID);
    string GetLinkFromResult(ref IResult Result);
    string GetName(long ResultId, long DocTypeId);
    INewResult GetNewNewResult(IDocType DocType, int _UserId = 0, string File = "");
    INewResult GetNewNewResult(long docTypeId);
    INewResult GetNewNewResult(long docId, IDocType docType);
    IResult GetNewResult(long docId, IDocType docType);
    INewResult GetNewResult(long docTypeId, string File);
    ITaskResult GetNewTaskResult(long DocId, IDocType DocType);
    int GetNewVersionID(long RootId, int doctype, long OriginalDocId);
    DataTable GetObservaciones(long entityId, long parentResultId, long AtributeId);
    string GetPahtWhereDocTypeAndID(long lngDocType, long lngDocID);
    long GetParentVersionId(long DocTypeid, long docid);
    DataTable getPermisosInsert();
    DataTable GetRequestAssociatedResult(long requestNumber, long tableID, long formID, List<long> indexs);
    long GetRequestNumber(long tableId, long indexId, long docId);
    IResult GetResult(long docId, long docTypeId, bool FullLoad);
    DataRow GetResultRow(long docId, long docTypeId);
    DataTable GetResults(int DocTypeId);
    DataTable getResultsAndPageQueryResults(short PageId, short PageSize, int docTypeId, long indexId, List<ArrayList> genIndex, int UserId, string comparateValue = "", string comparateDateValue = "", string Operation = "", bool searchValue = true, string SortExpression = "", string SymbolToReplace = "", string BySimbolReplace = "", ref int resultCount = 0);
    DataSet getResultsData(int docTypeId, int indexId, List<ArrayList> genIndex, int UserId, string comparateValue = "", bool searchValue = true);
    long GetRuleIDWhereWI(long lngWI);
    INewResult GetSearchResult(IDocType DocType, int _UserId = 0, string File = "");
    DataTable GetSelectDoShowTable();
    string GetTaskURL(int currentuserid, int docid, int entityid, bool useOriginal);
    string GetTempFileFromResult(IResult localResult, bool GetPreview);
    List<string> GetWatingDocumentMails(long lngRuleID);
    byte[] GetWebDocFileWS(long docTypeId, long docId, long userId);
    List<long> GetWIFromZIWhereRuleID(long lngRuleID);
    List<long> GetWIFromZWFI(long ruleID);
    InsertResult Insert(ref INewResult newResult, bool move, bool reIndexFlag = false, bool reemplazarFlag = false, bool showQuestions = true, bool isVirtual = false, bool isReplica = false, bool hasName = false, bool throwEx = false, bool RefreshWFAfterInsert = true, decimal Userid = 0, long newId = 0);
    long Insert(string name, byte[] binaryDocument, string fileExtension, long docTypeId, DataTable indexs, bool DontOpenTaskAfterInsertInDoGenerateCoverPage);
    bool InsertDocFileWS(long docId, long docTypeId, byte[] fileBytes, string incomingFile, long userId);
    InsertResult InsertDocumentNew(ref INewResult newResult, bool move, bool ReindexFlag = false, bool Reemplazar = false, bool showQuestions = true, bool IsVirtual = false, bool IsReplica = false, bool hasName = false);
    DataTable InsertIndexObservaciones(long entityId, long parentResultId, string InputObservacion, long AtributeId, long User);
    DataTable InsertIndexObservaciones(long entityId, long parentResultId, string InputObservacion, long AtributeId, long User, string Fecha);
    DataTable InsertIndexObservaciones2(long entityId, long parentResultId, string InputObservacion, long AtributeId, long User, string Fecha);
    DataTable InsertMigracionObservaciones(long EntitiId, string Fecha, long UsrId, string Value, long docId, long AtributeId);
    DataTable InsertMigracionObservaciones2(long EntitiId, string Fecha, long UsrId, string Value, long docId, long AtributeId);
    InsertResult InsertNew(ref INewResult newResult, bool move, bool reIndexFlag = false, bool reemplazarFlag = false, bool showQuestions = true, bool isVirtual = false, bool isReplica = false, bool hasName = false);
    IResult InsertNewVersion(IResult OriginalResult, string Comment);
    IResult InsertNewVersionNoComment(IResult OriginalResult);
    IResult InsertNewVersionNoComment(IResult OriginalResult, string newResultPath);
    bool IsDocTypeInWF(int DocTypeid);
    bool IsImage(Extensiones Ext);
    bool IsImage(string Ext);
    bool IsRuleWaitForDocumentReady(long ruleID);
    bool IsRuleWaiting(long lngRuleID, long lngInsertID);
    bool IsRuleWaitingDocument(long ruleId);
    byte[] LoadFileFromDB(long docId, long dopcTypeId);
    DataTable MigracionObservaciones(long Entidad);
    DataSet SearchbyIndexs(int indexId, int indexType, IDocType dt, string IndexData);
    Dictionary<long, long> SearchIndex(long lngIndexID, IndexDataType enmIndexType, string strComparador, string strValue);
    DataSet SearchIndex(long lngIndexID, IndexDataType enmIndexType, string strComparador, string strValue, long lngDocTypeID);
    DataSet SearchIndex(long lngIndexID, IndexDataType enmIndexType, string strComparador, string strValue, long lngDocTypeID, string restriction);
    Dictionary<long, long> SearchIndexByUserId(long indexId, IndexDataType indexType, string comparador, string value, long userId);
    Dictionary<long, long> SearchIndexByUserIdForWebServices(long indexId, IndexDataType indexType, string comparador, string value, long userId);
    DataSet SearchIndexForWebService(long lngIndexID, IndexDataType enmIndexType, string strComparador, string strValue, long lngDocTypeID, string restriction);
    bool setIndexData(long indexId, long entityId, long parentResultId, string indexValue);
    InsertResult UpdateInsert(ref INewResult Result, bool move, bool ReindexFlag = false, bool Reemplazar = false, bool showQuestions = true, bool IsVirtual = false, bool addToWF = true);
    bool ValidateDescriptionInSustIndex(INewResult _newresult);
    bool ValidateIndexData(INewResult _newresult);
    bool ValidateIndexDatabyRights(IResult _result);
    bool ValidateIndexDataFromDoctype(INewResult _newresult);
    bool ValidateIsDocTypeInZI(long docType);
    bool ValidateNewResult(int DocTypeId, int docid);
    bool ValidateWI(long ruleID);
}
