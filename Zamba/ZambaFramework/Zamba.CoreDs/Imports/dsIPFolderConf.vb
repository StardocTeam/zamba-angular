'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.3705.288
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsIPFolderConf
    Inherits DataSet
    
    Private tableIP_FolderConf As IP_FolderConfDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        RemoveHandler Me.Tables.CollectionChanged, schemaChangedHandler
        RemoveHandler Me.Relations.CollectionChanged, schemaChangedHandler
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("IP_FolderConf")) Is Nothing) Then
                Me.Tables.Add(New IP_FolderConfDataTable(ds.Tables("IP_FolderConf")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        RemoveHandler Me.Tables.CollectionChanged, schemaChangedHandler
        RemoveHandler Me.Relations.CollectionChanged, schemaChangedHandler
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IP_FolderConf As IP_FolderConfDataTable
        Get
            Return Me.tableIP_FolderConf
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsIPFolderConf = CType(MyBase.Clone,dsIPFolderConf)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("IP_FolderConf")) Is Nothing) Then
            Me.Tables.Add(New IP_FolderConfDataTable(ds.Tables("IP_FolderConf")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableIP_FolderConf = CType(Me.Tables("IP_FolderConf"),IP_FolderConfDataTable)
        If (Not (Me.tableIP_FolderConf) Is Nothing) Then
            Me.tableIP_FolderConf.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsIPFolderConf"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsIPFolderConf.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableIP_FolderConf = New IP_FolderConfDataTable
        Me.Tables.Add(Me.tableIP_FolderConf)
    End Sub
    
    Private Function ShouldSerializeIP_FolderConf() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub IP_FolderConfRowChangeEventHandler(ByVal sender As Object, ByVal e As IP_FolderConfRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class IP_FolderConfDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId_Carpeta As DataColumn
        
        Private columnTimer As DataColumn
        
        Private columnAlarma As DataColumn
        
        Private columnDomingo As DataColumn
        
        Private columnLunes As DataColumn
        
        Private columnMartes As DataColumn
        
        Private columnMiercoles As DataColumn
        
        Private columnJueves As DataColumn
        
        Private columnViernes As DataColumn
        
        Private columnSabado As DataColumn
        
        Private columnAutomatico As DataColumn
        
        Friend Sub New()
            MyBase.New("IP_FolderConf")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Id_CarpetaColumn As DataColumn
            Get
                Return Me.columnId_Carpeta
            End Get
        End Property
        
        Friend ReadOnly Property TimerColumn As DataColumn
            Get
                Return Me.columnTimer
            End Get
        End Property
        
        Friend ReadOnly Property AlarmaColumn As DataColumn
            Get
                Return Me.columnAlarma
            End Get
        End Property
        
        Friend ReadOnly Property DomingoColumn As DataColumn
            Get
                Return Me.columnDomingo
            End Get
        End Property
        
        Friend ReadOnly Property LunesColumn As DataColumn
            Get
                Return Me.columnLunes
            End Get
        End Property
        
        Friend ReadOnly Property MartesColumn As DataColumn
            Get
                Return Me.columnMartes
            End Get
        End Property
        
        Friend ReadOnly Property MiercolesColumn As DataColumn
            Get
                Return Me.columnMiercoles
            End Get
        End Property
        
        Friend ReadOnly Property JuevesColumn As DataColumn
            Get
                Return Me.columnJueves
            End Get
        End Property
        
        Friend ReadOnly Property ViernesColumn As DataColumn
            Get
                Return Me.columnViernes
            End Get
        End Property
        
        Friend ReadOnly Property SabadoColumn As DataColumn
            Get
                Return Me.columnSabado
            End Get
        End Property
        
        Friend ReadOnly Property AutomaticoColumn As DataColumn
            Get
                Return Me.columnAutomatico
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As IP_FolderConfRow
            Get
                Return CType(Me.Rows(index),IP_FolderConfRow)
            End Get
        End Property
        
        Public Event IP_FolderConfRowChanged As IP_FolderConfRowChangeEventHandler
        
        Public Event IP_FolderConfRowChanging As IP_FolderConfRowChangeEventHandler
        
        Public Event IP_FolderConfRowDeleted As IP_FolderConfRowChangeEventHandler
        
        Public Event IP_FolderConfRowDeleting As IP_FolderConfRowChangeEventHandler
        
        Public Overloads Sub AddIP_FolderConfRow(ByVal row As IP_FolderConfRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddIP_FolderConfRow(ByVal Id_Carpeta As Decimal, ByVal Timer As Integer, ByVal Alarma As String, ByVal Domingo As Boolean, ByVal Lunes As Boolean, ByVal Martes As Boolean, ByVal Miercoles As Boolean, ByVal Jueves As Boolean, ByVal Viernes As Boolean, ByVal Sabado As Boolean, ByVal Automatico As Boolean) As IP_FolderConfRow
            Dim rowIP_FolderConfRow As IP_FolderConfRow = CType(Me.NewRow,IP_FolderConfRow)
            rowIP_FolderConfRow.ItemArray = New Object() {Id_Carpeta, Timer, Alarma, Domingo, Lunes, Martes, Miercoles, Jueves, Viernes, Sabado, Automatico}
            Me.Rows.Add(rowIP_FolderConfRow)
            Return rowIP_FolderConfRow
        End Function
        
        Public Function FindById_Carpeta(ByVal Id_Carpeta As Decimal) As IP_FolderConfRow
            Return CType(Me.Rows.Find(New Object() {Id_Carpeta}),IP_FolderConfRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As IP_FolderConfDataTable = CType(MyBase.Clone,IP_FolderConfDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New IP_FolderConfDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId_Carpeta = Me.Columns("Id_Carpeta")
            Me.columnTimer = Me.Columns("Timer")
            Me.columnAlarma = Me.Columns("Alarma")
            Me.columnDomingo = Me.Columns("Domingo")
            Me.columnLunes = Me.Columns("Lunes")
            Me.columnMartes = Me.Columns("Martes")
            Me.columnMiercoles = Me.Columns("Miercoles")
            Me.columnJueves = Me.Columns("Jueves")
            Me.columnViernes = Me.Columns("Viernes")
            Me.columnSabado = Me.Columns("Sabado")
            Me.columnAutomatico = Me.Columns("Automatico")
        End Sub
        
        Private Sub InitClass()
            Me.columnId_Carpeta = New DataColumn("Id_Carpeta", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Carpeta)
            Me.columnTimer = New DataColumn("Timer", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTimer)
            Me.columnAlarma = New DataColumn("Alarma", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAlarma)
            Me.columnDomingo = New DataColumn("Domingo", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDomingo)
            Me.columnLunes = New DataColumn("Lunes", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLunes)
            Me.columnMartes = New DataColumn("Martes", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMartes)
            Me.columnMiercoles = New DataColumn("Miercoles", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMiercoles)
            Me.columnJueves = New DataColumn("Jueves", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnJueves)
            Me.columnViernes = New DataColumn("Viernes", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnViernes)
            Me.columnSabado = New DataColumn("Sabado", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSabado)
            Me.columnAutomatico = New DataColumn("Automatico", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAutomatico)
            Me.Constraints.Add(New UniqueConstraint("dsIPFolderConfKey1", New DataColumn() {Me.columnId_Carpeta}, true))
            Me.columnId_Carpeta.AllowDBNull = false
            Me.columnId_Carpeta.Unique = true
        End Sub
        
        Public Function NewIP_FolderConfRow() As IP_FolderConfRow
            Return CType(Me.NewRow,IP_FolderConfRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New IP_FolderConfRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(IP_FolderConfRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IP_FolderConfRowChangedEvent) Is Nothing) Then
                RaiseEvent IP_FolderConfRowChanged(Me, New IP_FolderConfRowChangeEvent(CType(e.Row,IP_FolderConfRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IP_FolderConfRowChangingEvent) Is Nothing) Then
                RaiseEvent IP_FolderConfRowChanging(Me, New IP_FolderConfRowChangeEvent(CType(e.Row,IP_FolderConfRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IP_FolderConfRowDeletedEvent) Is Nothing) Then
                RaiseEvent IP_FolderConfRowDeleted(Me, New IP_FolderConfRowChangeEvent(CType(e.Row,IP_FolderConfRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IP_FolderConfRowDeletingEvent) Is Nothing) Then
                RaiseEvent IP_FolderConfRowDeleting(Me, New IP_FolderConfRowChangeEvent(CType(e.Row,IP_FolderConfRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveIP_FolderConfRow(ByVal row As IP_FolderConfRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class IP_FolderConfRow
        Inherits DataRow
        
        Private tableIP_FolderConf As IP_FolderConfDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableIP_FolderConf = CType(Me.Table,IP_FolderConfDataTable)
        End Sub
        
        Public Property Id_Carpeta As Decimal
            Get
                Return CType(Me(Me.tableIP_FolderConf.Id_CarpetaColumn),Decimal)
            End Get
            Set
                Me(Me.tableIP_FolderConf.Id_CarpetaColumn) = value
            End Set
        End Property
        
        Public Property Timer As Integer
            Get
                Try 
                    Return CType(Me(Me.tableIP_FolderConf.TimerColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIP_FolderConf.TimerColumn) = value
            End Set
        End Property
        
        Public Property Alarma As String
            Get
                Try 
                    Return CType(Me(Me.tableIP_FolderConf.AlarmaColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIP_FolderConf.AlarmaColumn) = value
            End Set
        End Property
        
        Public Property Domingo As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableIP_FolderConf.DomingoColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIP_FolderConf.DomingoColumn) = value
            End Set
        End Property
        
        Public Property Lunes As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableIP_FolderConf.LunesColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIP_FolderConf.LunesColumn) = value
            End Set
        End Property
        
        Public Property Martes As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableIP_FolderConf.MartesColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIP_FolderConf.MartesColumn) = value
            End Set
        End Property
        
        Public Property Miercoles As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableIP_FolderConf.MiercolesColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIP_FolderConf.MiercolesColumn) = value
            End Set
        End Property
        
        Public Property Jueves As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableIP_FolderConf.JuevesColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIP_FolderConf.JuevesColumn) = value
            End Set
        End Property
        
        Public Property Viernes As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableIP_FolderConf.ViernesColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIP_FolderConf.ViernesColumn) = value
            End Set
        End Property
        
        Public Property Sabado As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableIP_FolderConf.SabadoColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIP_FolderConf.SabadoColumn) = value
            End Set
        End Property
        
        Public Property Automatico As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableIP_FolderConf.AutomaticoColumn),Boolean)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIP_FolderConf.AutomaticoColumn) = value
            End Set
        End Property
        
        Public Function IsTimerNull() As Boolean
            Return Me.IsNull(Me.tableIP_FolderConf.TimerColumn)
        End Function
        
        Public Sub SetTimerNull()
            Me(Me.tableIP_FolderConf.TimerColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAlarmaNull() As Boolean
            Return Me.IsNull(Me.tableIP_FolderConf.AlarmaColumn)
        End Function
        
        Public Sub SetAlarmaNull()
            Me(Me.tableIP_FolderConf.AlarmaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDomingoNull() As Boolean
            Return Me.IsNull(Me.tableIP_FolderConf.DomingoColumn)
        End Function
        
        Public Sub SetDomingoNull()
            Me(Me.tableIP_FolderConf.DomingoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLunesNull() As Boolean
            Return Me.IsNull(Me.tableIP_FolderConf.LunesColumn)
        End Function
        
        Public Sub SetLunesNull()
            Me(Me.tableIP_FolderConf.LunesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMartesNull() As Boolean
            Return Me.IsNull(Me.tableIP_FolderConf.MartesColumn)
        End Function
        
        Public Sub SetMartesNull()
            Me(Me.tableIP_FolderConf.MartesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMiercolesNull() As Boolean
            Return Me.IsNull(Me.tableIP_FolderConf.MiercolesColumn)
        End Function
        
        Public Sub SetMiercolesNull()
            Me(Me.tableIP_FolderConf.MiercolesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsJuevesNull() As Boolean
            Return Me.IsNull(Me.tableIP_FolderConf.JuevesColumn)
        End Function
        
        Public Sub SetJuevesNull()
            Me(Me.tableIP_FolderConf.JuevesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsViernesNull() As Boolean
            Return Me.IsNull(Me.tableIP_FolderConf.ViernesColumn)
        End Function
        
        Public Sub SetViernesNull()
            Me(Me.tableIP_FolderConf.ViernesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSabadoNull() As Boolean
            Return Me.IsNull(Me.tableIP_FolderConf.SabadoColumn)
        End Function
        
        Public Sub SetSabadoNull()
            Me(Me.tableIP_FolderConf.SabadoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAutomaticoNull() As Boolean
            Return Me.IsNull(Me.tableIP_FolderConf.AutomaticoColumn)
        End Function
        
        Public Sub SetAutomaticoNull()
            Me(Me.tableIP_FolderConf.AutomaticoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class IP_FolderConfRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As IP_FolderConfRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As IP_FolderConfRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As IP_FolderConfRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
