'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.3705.288
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsIPTask
    Inherits DataSet
    
    Private tableIP_Task As IP_TaskDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        RemoveHandler Me.Tables.CollectionChanged, schemaChangedHandler
        RemoveHandler Me.Relations.CollectionChanged, schemaChangedHandler
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("IP_Task")) Is Nothing) Then
                Me.Tables.Add(New IP_TaskDataTable(ds.Tables("IP_Task")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        RemoveHandler Me.Tables.CollectionChanged, schemaChangedHandler
        RemoveHandler Me.Relations.CollectionChanged, schemaChangedHandler
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IP_Task As IP_TaskDataTable
        Get
            Return Me.tableIP_Task
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsIPTask = CType(MyBase.Clone,DsIPTask)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("IP_Task")) Is Nothing) Then
            Me.Tables.Add(New IP_TaskDataTable(ds.Tables("IP_Task")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableIP_Task = CType(Me.Tables("IP_Task"),IP_TaskDataTable)
        If (Not (Me.tableIP_Task) Is Nothing) Then
            Me.tableIP_Task.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsIPTask"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DsIPTask.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableIP_Task = New IP_TaskDataTable
        Me.Tables.Add(Me.tableIP_Task)
    End Sub
    
    Private Function ShouldSerializeIP_Task() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub IP_TaskRowChangeEventHandler(ByVal sender As Object, ByVal e As IP_TaskRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class IP_TaskDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId As DataColumn
        
        Private columnRuta As DataColumn
        
        Private columnArchivo_Zip As DataColumn
        
        Friend Sub New()
            MyBase.New("IP_Task")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IdColumn As DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        Friend ReadOnly Property RutaColumn As DataColumn
            Get
                Return Me.columnRuta
            End Get
        End Property
        
        Friend ReadOnly Property Archivo_ZipColumn As DataColumn
            Get
                Return Me.columnArchivo_Zip
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As IP_TaskRow
            Get
                Return CType(Me.Rows(index),IP_TaskRow)
            End Get
        End Property
        
        Public Event IP_TaskRowChanged As IP_TaskRowChangeEventHandler
        
        Public Event IP_TaskRowChanging As IP_TaskRowChangeEventHandler
        
        Public Event IP_TaskRowDeleted As IP_TaskRowChangeEventHandler
        
        Public Event IP_TaskRowDeleting As IP_TaskRowChangeEventHandler
        
        Public Overloads Sub AddIP_TaskRow(ByVal row As IP_TaskRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddIP_TaskRow(ByVal Id As Decimal, ByVal Ruta As String, ByVal Archivo_Zip As String) As IP_TaskRow
            Dim rowIP_TaskRow As IP_TaskRow = CType(Me.NewRow,IP_TaskRow)
            rowIP_TaskRow.ItemArray = New Object() {Id, Ruta, Archivo_Zip}
            Me.Rows.Add(rowIP_TaskRow)
            Return rowIP_TaskRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As IP_TaskDataTable = CType(MyBase.Clone,IP_TaskDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New IP_TaskDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId = Me.Columns("Id")
            Me.columnRuta = Me.Columns("Ruta")
            Me.columnArchivo_Zip = Me.Columns("Archivo_Zip")
        End Sub
        
        Private Sub InitClass()
            Me.columnId = New DataColumn("Id", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId)
            Me.columnRuta = New DataColumn("Ruta", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRuta)
            Me.columnArchivo_Zip = New DataColumn("Archivo_Zip", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArchivo_Zip)
            Me.columnId.AllowDBNull = false
            Me.columnRuta.AllowDBNull = false
        End Sub
        
        Public Function NewIP_TaskRow() As IP_TaskRow
            Return CType(Me.NewRow,IP_TaskRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New IP_TaskRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(IP_TaskRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IP_TaskRowChangedEvent) Is Nothing) Then
                RaiseEvent IP_TaskRowChanged(Me, New IP_TaskRowChangeEvent(CType(e.Row,IP_TaskRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IP_TaskRowChangingEvent) Is Nothing) Then
                RaiseEvent IP_TaskRowChanging(Me, New IP_TaskRowChangeEvent(CType(e.Row,IP_TaskRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IP_TaskRowDeletedEvent) Is Nothing) Then
                RaiseEvent IP_TaskRowDeleted(Me, New IP_TaskRowChangeEvent(CType(e.Row,IP_TaskRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IP_TaskRowDeletingEvent) Is Nothing) Then
                RaiseEvent IP_TaskRowDeleting(Me, New IP_TaskRowChangeEvent(CType(e.Row,IP_TaskRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveIP_TaskRow(ByVal row As IP_TaskRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class IP_TaskRow
        Inherits DataRow
        
        Private tableIP_Task As IP_TaskDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableIP_Task = CType(Me.Table,IP_TaskDataTable)
        End Sub
        
        Public Property Id As Decimal
            Get
                Return CType(Me(Me.tableIP_Task.IdColumn),Decimal)
            End Get
            Set
                Me(Me.tableIP_Task.IdColumn) = value
            End Set
        End Property
        
        Public Property Ruta As String
            Get
                Return CType(Me(Me.tableIP_Task.RutaColumn),String)
            End Get
            Set
                Me(Me.tableIP_Task.RutaColumn) = value
            End Set
        End Property
        
        Public Property Archivo_Zip As String
            Get
                Try 
                    Return CType(Me(Me.tableIP_Task.Archivo_ZipColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIP_Task.Archivo_ZipColumn) = value
            End Set
        End Property
        
        Public Function IsArchivo_ZipNull() As Boolean
            Return Me.IsNull(Me.tableIP_Task.Archivo_ZipColumn)
        End Function
        
        Public Sub SetArchivo_ZipNull()
            Me(Me.tableIP_Task.Archivo_ZipColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class IP_TaskRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As IP_TaskRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As IP_TaskRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As IP_TaskRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
