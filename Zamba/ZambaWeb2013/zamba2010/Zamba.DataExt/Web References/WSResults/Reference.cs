//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Microsoft.VSDesigner generó automáticamente este código fuente, versión=4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Zamba.DataExt.WSResults {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ResultsSoap", Namespace="http://tempuri.org/")]
    public partial class Results : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetWebDocFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback CopyBlobToVolumeOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertDocFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertForumAttachOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAttachFileByMessageIdAndNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAttachsNamesByMessageIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveMailHistoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMailOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveMessageFileBlobOperationCompleted;
        
        private System.Threading.SendOrPostCallback ZSendMailOperationCompleted;
        
        private System.Threading.SendOrPostCallback ZSendMailWithAttachesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetConfigPathOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStartUpPathOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAppTempPathOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetZDynamicTableOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Results() {
            this.Url = global::Zamba.DataExt.Properties.Settings.Default.Zamba_DataExt_WSResults_Results;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetWebDocFileCompletedEventHandler GetWebDocFileCompleted;
        
        /// <remarks/>
        public event CopyBlobToVolumeCompletedEventHandler CopyBlobToVolumeCompleted;
        
        /// <remarks/>
        public event InsertDocFileCompletedEventHandler InsertDocFileCompleted;
        
        /// <remarks/>
        public event InsertForumAttachCompletedEventHandler InsertForumAttachCompleted;
        
        /// <remarks/>
        public event GetAttachFileByMessageIdAndNameCompletedEventHandler GetAttachFileByMessageIdAndNameCompleted;
        
        /// <remarks/>
        public event GetAttachsNamesByMessageIdCompletedEventHandler GetAttachsNamesByMessageIdCompleted;
        
        /// <remarks/>
        public event SaveMailHistoryCompletedEventHandler SaveMailHistoryCompleted;
        
        /// <remarks/>
        public event GetMailCompletedEventHandler GetMailCompleted;
        
        /// <remarks/>
        public event SaveMessageFileBlobCompletedEventHandler SaveMessageFileBlobCompleted;
        
        /// <remarks/>
        public event ZSendMailCompletedEventHandler ZSendMailCompleted;
        
        /// <remarks/>
        public event ZSendMailWithAttachesCompletedEventHandler ZSendMailWithAttachesCompleted;
        
        /// <remarks/>
        public event GetConfigPathCompletedEventHandler GetConfigPathCompleted;
        
        /// <remarks/>
        public event GetStartUpPathCompletedEventHandler GetStartUpPathCompleted;
        
        /// <remarks/>
        public event GetAppTempPathCompletedEventHandler GetAppTempPathCompleted;
        
        /// <remarks/>
        public event GetZDynamicTableCompletedEventHandler GetZDynamicTableCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWebDocFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetWebDocFile(long DocTypeId, long DocId, long UserID) {
            object[] results = this.Invoke("GetWebDocFile", new object[] {
                        DocTypeId,
                        DocId,
                        UserID});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetWebDocFileAsync(long DocTypeId, long DocId, long UserID) {
            this.GetWebDocFileAsync(DocTypeId, DocId, UserID, null);
        }
        
        /// <remarks/>
        public void GetWebDocFileAsync(long DocTypeId, long DocId, long UserID, object userState) {
            if ((this.GetWebDocFileOperationCompleted == null)) {
                this.GetWebDocFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWebDocFileOperationCompleted);
            }
            this.InvokeAsync("GetWebDocFile", new object[] {
                        DocTypeId,
                        DocId,
                        UserID}, this.GetWebDocFileOperationCompleted, userState);
        }
        
        private void OnGetWebDocFileOperationCompleted(object arg) {
            if ((this.GetWebDocFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWebDocFileCompleted(this, new GetWebDocFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CopyBlobToVolume", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CopyBlobToVolume(long docId, long docTypeId) {
            object[] results = this.Invoke("CopyBlobToVolume", new object[] {
                        docId,
                        docTypeId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CopyBlobToVolumeAsync(long docId, long docTypeId) {
            this.CopyBlobToVolumeAsync(docId, docTypeId, null);
        }
        
        /// <remarks/>
        public void CopyBlobToVolumeAsync(long docId, long docTypeId, object userState) {
            if ((this.CopyBlobToVolumeOperationCompleted == null)) {
                this.CopyBlobToVolumeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCopyBlobToVolumeOperationCompleted);
            }
            this.InvokeAsync("CopyBlobToVolume", new object[] {
                        docId,
                        docTypeId}, this.CopyBlobToVolumeOperationCompleted, userState);
        }
        
        private void OnCopyBlobToVolumeOperationCompleted(object arg) {
            if ((this.CopyBlobToVolumeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CopyBlobToVolumeCompleted(this, new CopyBlobToVolumeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertDocFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool InsertDocFile(long docID, long docTypeId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] file, string fileName, long userID) {
            object[] results = this.Invoke("InsertDocFile", new object[] {
                        docID,
                        docTypeId,
                        file,
                        fileName,
                        userID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InsertDocFileAsync(long docID, long docTypeId, byte[] file, string fileName, long userID) {
            this.InsertDocFileAsync(docID, docTypeId, file, fileName, userID, null);
        }
        
        /// <remarks/>
        public void InsertDocFileAsync(long docID, long docTypeId, byte[] file, string fileName, long userID, object userState) {
            if ((this.InsertDocFileOperationCompleted == null)) {
                this.InsertDocFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertDocFileOperationCompleted);
            }
            this.InvokeAsync("InsertDocFile", new object[] {
                        docID,
                        docTypeId,
                        file,
                        fileName,
                        userID}, this.InsertDocFileOperationCompleted, userState);
        }
        
        private void OnInsertDocFileOperationCompleted(object arg) {
            if ((this.InsertDocFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertDocFileCompleted(this, new InsertDocFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertForumAttach", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool InsertForumAttach(int MessageID, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] file, long UserID, string fileName) {
            object[] results = this.Invoke("InsertForumAttach", new object[] {
                        MessageID,
                        file,
                        UserID,
                        fileName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InsertForumAttachAsync(int MessageID, byte[] file, long UserID, string fileName) {
            this.InsertForumAttachAsync(MessageID, file, UserID, fileName, null);
        }
        
        /// <remarks/>
        public void InsertForumAttachAsync(int MessageID, byte[] file, long UserID, string fileName, object userState) {
            if ((this.InsertForumAttachOperationCompleted == null)) {
                this.InsertForumAttachOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertForumAttachOperationCompleted);
            }
            this.InvokeAsync("InsertForumAttach", new object[] {
                        MessageID,
                        file,
                        UserID,
                        fileName}, this.InsertForumAttachOperationCompleted, userState);
        }
        
        private void OnInsertForumAttachOperationCompleted(object arg) {
            if ((this.InsertForumAttachCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertForumAttachCompleted(this, new InsertForumAttachCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAttachFileByMessageIdAndName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetAttachFileByMessageIdAndName(int MessageId, string fileName, long UserID) {
            object[] results = this.Invoke("GetAttachFileByMessageIdAndName", new object[] {
                        MessageId,
                        fileName,
                        UserID});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAttachFileByMessageIdAndNameAsync(int MessageId, string fileName, long UserID) {
            this.GetAttachFileByMessageIdAndNameAsync(MessageId, fileName, UserID, null);
        }
        
        /// <remarks/>
        public void GetAttachFileByMessageIdAndNameAsync(int MessageId, string fileName, long UserID, object userState) {
            if ((this.GetAttachFileByMessageIdAndNameOperationCompleted == null)) {
                this.GetAttachFileByMessageIdAndNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAttachFileByMessageIdAndNameOperationCompleted);
            }
            this.InvokeAsync("GetAttachFileByMessageIdAndName", new object[] {
                        MessageId,
                        fileName,
                        UserID}, this.GetAttachFileByMessageIdAndNameOperationCompleted, userState);
        }
        
        private void OnGetAttachFileByMessageIdAndNameOperationCompleted(object arg) {
            if ((this.GetAttachFileByMessageIdAndNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAttachFileByMessageIdAndNameCompleted(this, new GetAttachFileByMessageIdAndNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAttachsNamesByMessageId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetAttachsNamesByMessageId(int MessageId, long UserId) {
            object[] results = this.Invoke("GetAttachsNamesByMessageId", new object[] {
                        MessageId,
                        UserId});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAttachsNamesByMessageIdAsync(int MessageId, long UserId) {
            this.GetAttachsNamesByMessageIdAsync(MessageId, UserId, null);
        }
        
        /// <remarks/>
        public void GetAttachsNamesByMessageIdAsync(int MessageId, long UserId, object userState) {
            if ((this.GetAttachsNamesByMessageIdOperationCompleted == null)) {
                this.GetAttachsNamesByMessageIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAttachsNamesByMessageIdOperationCompleted);
            }
            this.InvokeAsync("GetAttachsNamesByMessageId", new object[] {
                        MessageId,
                        UserId}, this.GetAttachsNamesByMessageIdOperationCompleted, userState);
        }
        
        private void OnGetAttachsNamesByMessageIdOperationCompleted(object arg) {
            if ((this.GetAttachsNamesByMessageIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAttachsNamesByMessageIdCompleted(this, new GetAttachsNamesByMessageIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaveMailHistory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SaveMailHistory(string To, string CC, string CCO, string Subject, string Body, string[] Attachs, long DocId, long DocTypeID, long UserID, string ExportPath) {
            object[] results = this.Invoke("SaveMailHistory", new object[] {
                        To,
                        CC,
                        CCO,
                        Subject,
                        Body,
                        Attachs,
                        DocId,
                        DocTypeID,
                        UserID,
                        ExportPath});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SaveMailHistoryAsync(string To, string CC, string CCO, string Subject, string Body, string[] Attachs, long DocId, long DocTypeID, long UserID, string ExportPath) {
            this.SaveMailHistoryAsync(To, CC, CCO, Subject, Body, Attachs, DocId, DocTypeID, UserID, ExportPath, null);
        }
        
        /// <remarks/>
        public void SaveMailHistoryAsync(string To, string CC, string CCO, string Subject, string Body, string[] Attachs, long DocId, long DocTypeID, long UserID, string ExportPath, object userState) {
            if ((this.SaveMailHistoryOperationCompleted == null)) {
                this.SaveMailHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveMailHistoryOperationCompleted);
            }
            this.InvokeAsync("SaveMailHistory", new object[] {
                        To,
                        CC,
                        CCO,
                        Subject,
                        Body,
                        Attachs,
                        DocId,
                        DocTypeID,
                        UserID,
                        ExportPath}, this.SaveMailHistoryOperationCompleted, userState);
        }
        
        private void OnSaveMailHistoryOperationCompleted(object arg) {
            if ((this.SaveMailHistoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveMailHistoryCompleted(this, new SaveMailHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetMail(long id, long userId) {
            object[] results = this.Invoke("GetMail", new object[] {
                        id,
                        userId});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMailAsync(long id, long userId) {
            this.GetMailAsync(id, userId, null);
        }
        
        /// <remarks/>
        public void GetMailAsync(long id, long userId, object userState) {
            if ((this.GetMailOperationCompleted == null)) {
                this.GetMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMailOperationCompleted);
            }
            this.InvokeAsync("GetMail", new object[] {
                        id,
                        userId}, this.GetMailOperationCompleted, userState);
        }
        
        private void OnGetMailOperationCompleted(object arg) {
            if ((this.GetMailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMailCompleted(this, new GetMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaveMessageFileBlob", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SaveMessageFileBlob(long id, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] file) {
            object[] results = this.Invoke("SaveMessageFileBlob", new object[] {
                        id,
                        file});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SaveMessageFileBlobAsync(long id, byte[] file) {
            this.SaveMessageFileBlobAsync(id, file, null);
        }
        
        /// <remarks/>
        public void SaveMessageFileBlobAsync(long id, byte[] file, object userState) {
            if ((this.SaveMessageFileBlobOperationCompleted == null)) {
                this.SaveMessageFileBlobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveMessageFileBlobOperationCompleted);
            }
            this.InvokeAsync("SaveMessageFileBlob", new object[] {
                        id,
                        file}, this.SaveMessageFileBlobOperationCompleted, userState);
        }
        
        private void OnSaveMessageFileBlobOperationCompleted(object arg) {
            if ((this.SaveMessageFileBlobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveMessageFileBlobCompleted(this, new SaveMessageFileBlobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ZSendMail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ZSendMail(string from, string smtp, string port, string user, string pass, string to, string cc, string cco, string subject, string body, string[] attachs, long userid, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] originalFile, string originalFileName, bool enableSsl) {
            object[] results = this.Invoke("ZSendMail", new object[] {
                        from,
                        smtp,
                        port,
                        user,
                        pass,
                        to,
                        cc,
                        cco,
                        subject,
                        body,
                        attachs,
                        userid,
                        originalFile,
                        originalFileName,
                        enableSsl});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ZSendMailAsync(string from, string smtp, string port, string user, string pass, string to, string cc, string cco, string subject, string body, string[] attachs, long userid, byte[] originalFile, string originalFileName, bool enableSsl) {
            this.ZSendMailAsync(from, smtp, port, user, pass, to, cc, cco, subject, body, attachs, userid, originalFile, originalFileName, enableSsl, null);
        }
        
        /// <remarks/>
        public void ZSendMailAsync(
                    string from, 
                    string smtp, 
                    string port, 
                    string user, 
                    string pass, 
                    string to, 
                    string cc, 
                    string cco, 
                    string subject, 
                    string body, 
                    string[] attachs, 
                    long userid, 
                    byte[] originalFile, 
                    string originalFileName, 
                    bool enableSsl, 
                    object userState) {
            if ((this.ZSendMailOperationCompleted == null)) {
                this.ZSendMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnZSendMailOperationCompleted);
            }
            this.InvokeAsync("ZSendMail", new object[] {
                        from,
                        smtp,
                        port,
                        user,
                        pass,
                        to,
                        cc,
                        cco,
                        subject,
                        body,
                        attachs,
                        userid,
                        originalFile,
                        originalFileName,
                        enableSsl}, this.ZSendMailOperationCompleted, userState);
        }
        
        private void OnZSendMailOperationCompleted(object arg) {
            if ((this.ZSendMailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ZSendMailCompleted(this, new ZSendMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ZSendMailWithAttaches", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ZSendMailWithAttaches(string from, string smtp, string port, string user, string pass, string to, string cc, string cco, string subject, string body, BlobDocument[] attachs, long userid, bool enableSsl) {
            object[] results = this.Invoke("ZSendMailWithAttaches", new object[] {
                        from,
                        smtp,
                        port,
                        user,
                        pass,
                        to,
                        cc,
                        cco,
                        subject,
                        body,
                        attachs,
                        userid,
                        enableSsl});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ZSendMailWithAttachesAsync(string from, string smtp, string port, string user, string pass, string to, string cc, string cco, string subject, string body, BlobDocument[] attachs, long userid, bool enableSsl) {
            this.ZSendMailWithAttachesAsync(from, smtp, port, user, pass, to, cc, cco, subject, body, attachs, userid, enableSsl, null);
        }
        
        /// <remarks/>
        public void ZSendMailWithAttachesAsync(string from, string smtp, string port, string user, string pass, string to, string cc, string cco, string subject, string body, BlobDocument[] attachs, long userid, bool enableSsl, object userState) {
            if ((this.ZSendMailWithAttachesOperationCompleted == null)) {
                this.ZSendMailWithAttachesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnZSendMailWithAttachesOperationCompleted);
            }
            this.InvokeAsync("ZSendMailWithAttaches", new object[] {
                        from,
                        smtp,
                        port,
                        user,
                        pass,
                        to,
                        cc,
                        cco,
                        subject,
                        body,
                        attachs,
                        userid,
                        enableSsl}, this.ZSendMailWithAttachesOperationCompleted, userState);
        }
        
        private void OnZSendMailWithAttachesOperationCompleted(object arg) {
            if ((this.ZSendMailWithAttachesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ZSendMailWithAttachesCompleted(this, new ZSendMailWithAttachesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetConfigPath", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetConfigPath() {
            object[] results = this.Invoke("GetConfigPath", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetConfigPathAsync() {
            this.GetConfigPathAsync(null);
        }
        
        /// <remarks/>
        public void GetConfigPathAsync(object userState) {
            if ((this.GetConfigPathOperationCompleted == null)) {
                this.GetConfigPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetConfigPathOperationCompleted);
            }
            this.InvokeAsync("GetConfigPath", new object[0], this.GetConfigPathOperationCompleted, userState);
        }
        
        private void OnGetConfigPathOperationCompleted(object arg) {
            if ((this.GetConfigPathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetConfigPathCompleted(this, new GetConfigPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStartUpPath", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetStartUpPath() {
            object[] results = this.Invoke("GetStartUpPath", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetStartUpPathAsync() {
            this.GetStartUpPathAsync(null);
        }
        
        /// <remarks/>
        public void GetStartUpPathAsync(object userState) {
            if ((this.GetStartUpPathOperationCompleted == null)) {
                this.GetStartUpPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStartUpPathOperationCompleted);
            }
            this.InvokeAsync("GetStartUpPath", new object[0], this.GetStartUpPathOperationCompleted, userState);
        }
        
        private void OnGetStartUpPathOperationCompleted(object arg) {
            if ((this.GetStartUpPathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStartUpPathCompleted(this, new GetStartUpPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAppTempPath", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAppTempPath() {
            object[] results = this.Invoke("GetAppTempPath", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAppTempPathAsync() {
            this.GetAppTempPathAsync(null);
        }
        
        /// <remarks/>
        public void GetAppTempPathAsync(object userState) {
            if ((this.GetAppTempPathOperationCompleted == null)) {
                this.GetAppTempPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAppTempPathOperationCompleted);
            }
            this.InvokeAsync("GetAppTempPath", new object[0], this.GetAppTempPathOperationCompleted, userState);
        }
        
        private void OnGetAppTempPathOperationCompleted(object arg) {
            if ((this.GetAppTempPathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAppTempPathCompleted(this, new GetAppTempPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetZDynamicTable", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FieldOptions GetZDynamicTable(string controlId, string dataSource, string showColumns, string filterFieldId, string editableColumns, string editableColumnsAttributes, string filterValues, string additionalValidationButton, string postAjaxFuncion, string tbody) {
            object[] results = this.Invoke("GetZDynamicTable", new object[] {
                        controlId,
                        dataSource,
                        showColumns,
                        filterFieldId,
                        editableColumns,
                        editableColumnsAttributes,
                        filterValues,
                        additionalValidationButton,
                        postAjaxFuncion,
                        tbody});
            return ((FieldOptions)(results[0]));
        }
        
        /// <remarks/>
        public void GetZDynamicTableAsync(string controlId, string dataSource, string showColumns, string filterFieldId, string editableColumns, string editableColumnsAttributes, string filterValues, string additionalValidationButton, string postAjaxFuncion, string tbody) {
            this.GetZDynamicTableAsync(controlId, dataSource, showColumns, filterFieldId, editableColumns, editableColumnsAttributes, filterValues, additionalValidationButton, postAjaxFuncion, tbody, null);
        }
        
        /// <remarks/>
        public void GetZDynamicTableAsync(string controlId, string dataSource, string showColumns, string filterFieldId, string editableColumns, string editableColumnsAttributes, string filterValues, string additionalValidationButton, string postAjaxFuncion, string tbody, object userState) {
            if ((this.GetZDynamicTableOperationCompleted == null)) {
                this.GetZDynamicTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetZDynamicTableOperationCompleted);
            }
            this.InvokeAsync("GetZDynamicTable", new object[] {
                        controlId,
                        dataSource,
                        showColumns,
                        filterFieldId,
                        editableColumns,
                        editableColumnsAttributes,
                        filterValues,
                        additionalValidationButton,
                        postAjaxFuncion,
                        tbody}, this.GetZDynamicTableOperationCompleted, userState);
        }
        
        private void OnGetZDynamicTableOperationCompleted(object arg) {
            if ((this.GetZDynamicTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetZDynamicTableCompleted(this, new GetZDynamicTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <comentarios/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class BlobDocument {
        
        private byte[] blobFileField;
        
        private string descriptionField;
        
        private System.DateTime updateDateField;
        
        private long updateuserField;
        
        private long idField;
        
        private string nameField;
        
        /// <comentarios/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] BlobFile {
            get {
                return this.blobFileField;
            }
            set {
                this.blobFileField = value;
            }
        }
        
        /// <comentarios/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <comentarios/>
        public System.DateTime UpdateDate {
            get {
                return this.updateDateField;
            }
            set {
                this.updateDateField = value;
            }
        }
        
        /// <comentarios/>
        public long Updateuser {
            get {
                return this.updateuserField;
            }
            set {
                this.updateuserField = value;
            }
        }
        
        /// <comentarios/>
        public long ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <comentarios/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <comentarios/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class FieldOptions {
        
        private string controlIdField;
        
        private string selectOptionsField;
        
        private string additionalValidationButtonField;
        
        private string postAjaxFunctionField;
        
        /// <comentarios/>
        public string ControlId {
            get {
                return this.controlIdField;
            }
            set {
                this.controlIdField = value;
            }
        }
        
        /// <comentarios/>
        public string SelectOptions {
            get {
                return this.selectOptionsField;
            }
            set {
                this.selectOptionsField = value;
            }
        }
        
        /// <comentarios/>
        public string AdditionalValidationButton {
            get {
                return this.additionalValidationButtonField;
            }
            set {
                this.additionalValidationButtonField = value;
            }
        }
        
        /// <comentarios/>
        public string PostAjaxFunction {
            get {
                return this.postAjaxFunctionField;
            }
            set {
                this.postAjaxFunctionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetWebDocFileCompletedEventHandler(object sender, GetWebDocFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWebDocFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWebDocFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void CopyBlobToVolumeCompletedEventHandler(object sender, CopyBlobToVolumeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CopyBlobToVolumeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CopyBlobToVolumeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void InsertDocFileCompletedEventHandler(object sender, InsertDocFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertDocFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertDocFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void InsertForumAttachCompletedEventHandler(object sender, InsertForumAttachCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertForumAttachCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertForumAttachCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetAttachFileByMessageIdAndNameCompletedEventHandler(object sender, GetAttachFileByMessageIdAndNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAttachFileByMessageIdAndNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAttachFileByMessageIdAndNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetAttachsNamesByMessageIdCompletedEventHandler(object sender, GetAttachsNamesByMessageIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAttachsNamesByMessageIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAttachsNamesByMessageIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void SaveMailHistoryCompletedEventHandler(object sender, SaveMailHistoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveMailHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveMailHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetMailCompletedEventHandler(object sender, GetMailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void SaveMessageFileBlobCompletedEventHandler(object sender, SaveMessageFileBlobCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveMessageFileBlobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveMessageFileBlobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void ZSendMailCompletedEventHandler(object sender, ZSendMailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ZSendMailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ZSendMailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void ZSendMailWithAttachesCompletedEventHandler(object sender, ZSendMailWithAttachesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ZSendMailWithAttachesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ZSendMailWithAttachesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetConfigPathCompletedEventHandler(object sender, GetConfigPathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetConfigPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetConfigPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetStartUpPathCompletedEventHandler(object sender, GetStartUpPathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStartUpPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStartUpPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetAppTempPathCompletedEventHandler(object sender, GetAppTempPathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAppTempPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAppTempPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetZDynamicTableCompletedEventHandler(object sender, GetZDynamicTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetZDynamicTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetZDynamicTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FieldOptions Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FieldOptions)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591