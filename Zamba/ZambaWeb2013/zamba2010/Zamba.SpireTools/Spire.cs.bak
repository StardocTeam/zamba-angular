using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Spire.Doc;
using Spire.Doc.Documents;
using Spire.Doc.Fields;
using System.Data;
using System.Drawing;
using Spire.Doc.Interface;
using System.Collections;
using Spire.Xls;
using Spire.DataExport.TXT;
using Spire.Pdf.Graphics;
using Spire.Pdf;
using System.Drawing.Imaging;
using System.IO;

namespace Zamba.FileTools
{
    public class SpireTools
    {
        /// <summary>
        /// Exporta un datatable a Excel
        /// </summary>
        /// <param name="dt"></param>
        /// <param name="path"></param>
        /// 
        public DataTable GetExcelAsDataSet(string file)
        {
            Workbook workbook = new Workbook();
            workbook.LoadFromFile(file);
            Worksheet sheet = workbook.Worksheets[0];
            return sheet.ExportDataTable();
        }
        public void ExportToXLS(DataTable dt, String path)
        {
            Workbook ef = null;
            Worksheet ws = null;
            try
            {
                ef = new Workbook();
                ws = ef.Worksheets.Add("Exportacion");

                while (ef.Worksheets.Count != 1)
                {
                    ef.Worksheets.Remove(0);
                }

                ws.InsertDataTable(dt, true, 1, 1);

                ef.SaveToFile(path);
            }
            finally
            {
                if (ws != null)
                {
                    ws.Dispose();
                    ws = null;
                }
                if (ef != null)
                {
                    ef.Dispose();
                    ef = null;
                }
            }
        }

        /// <summary>
        /// Exporta un datatable a un CSV
        /// </summary>
        /// <param name="dt"></param>
        /// <param name="path"></param>
        public void ExportToCSV(DataTable dt, String path)
        {
            TXTExport CSVExport = null;
            try
            {
                CSVExport = new TXTExport();
                CSVExport.DataSource = Spire.DataExport.Common.ExportSource.DataTable;
                CSVExport.DataTable = dt;
                CSVExport.ExportType = TextExportType.CSV;
                CSVExport.ActionAfterExport = Spire.DataExport.Common.ActionType.None;
                CSVExport.SaveToFile(path);
            }
            finally
            {
                if (CSVExport != null)
                {
                    CSVExport.Dispose();
                    CSVExport = null;
                }
            }
        }

        /// <summary>
        /// Convierte el word ubicado en la ruta a un PDF
        /// </summary>
        /// <param name="wordPath"></param>
        /// <param name="PDFPath"></param>
        public void ConvertWordToPDF(String wordPath, String PDFPath)
        {
            //Create a new document 
            Document doc = null;

            try
            {
                doc = new Document();
                //Load word 2007 file from disk.
                doc.LoadFromFile(wordPath);
                //Save doc file to pdf.
                doc.SaveToFile(PDFPath, Spire.Doc.FileFormat.PDF);
            }
            finally
            {
                if (doc != null)
                {
                    doc.Close();
                    doc = null;
                }
            }
        }

        public void ConvertPowerPointToPDF(String wordPath, String PDFPath)
        {
            //Create a new document 
            Spire.Presentation.Presentation presentation = null;
            try
            {
                //create PPT document
                presentation = new Spire.Presentation.Presentation();
                //load PPT file from disk
                presentation.LoadFromFile(wordPath);
                //save the PPT do PDF file format
                presentation.SaveToFile(PDFPath, Spire.Presentation.FileFormat.PDF);
            }
            finally
            {
                if (presentation != null)
                {
                    presentation = null;
                }
            }
        }

        public void ConvertImageToPDF(String wordPath, String PDFPath)
        {
            //Create a new document 
            PdfDocument doc = new PdfDocument();

            try
            {
                PdfSection section = doc.Sections.Add();
                PdfPageBase page = doc.Pages.Add();

                //Load a tiff image from system
                PdfImage image = PdfImage.FromFile(wordPath);
                //Set image display location and size in PDF
                float widthFitRate = image.PhysicalDimension.Width / page.Canvas.ClientSize.Width;
                float heightFitRate = image.PhysicalDimension.Height / page.Canvas.ClientSize.Height;
                float fitRate = Math.Max(widthFitRate, heightFitRate);
                float fitWidth = image.PhysicalDimension.Width / fitRate;
                float fitHeight = image.PhysicalDimension.Height / fitRate;
                page.Canvas.DrawImage(image, 30, 30, fitWidth, fitHeight);

                //save and launch the file
                doc.SaveToFile(PDFPath);
                doc.Close();
            }
            finally
            {
                if (doc != null)
                {
                    doc.Close();
                    doc = null;
                }
            }
        }


        public void ConvertTIFFToPDF(String ImageFilename, String PDFPath)
        {
            using (PdfDocument pdfDoc = new PdfDocument())
            {
                Image image = Image.FromFile(ImageFilename);
                Image[] img = SplitImages(image, ImageFormat.Png);

                for (int i = 0; i < img.Length; i++)
                {
                    PdfImage pdfImg = PdfImage.FromImage(img[i]);
                    PdfPageBase page = pdfDoc.Pages.Add();
                    float width = pdfImg.Width * 0.3f;
                    float height = pdfImg.Height * 0.3f;
                    float x = (page.Canvas.ClientSize.Width - width) / 2;

                    page.Canvas.DrawImage(pdfImg, x, 0, width, height);
                }

                pdfDoc.SaveToFile(PDFPath);
            }
        }



        public static Image[] SplitImages(Image image, ImageFormat format)
        {
            Guid guid = image.FrameDimensionsList[0];
            FrameDimension dimension = new FrameDimension(guid);
            int pageCount = image.GetFrameCount(dimension);
            Image[] frames = new Image[pageCount];

            for (int i = 0; i < pageCount; i++)
            {
                using (MemoryStream buffer = new MemoryStream())
                {
                    image.SelectActiveFrame(dimension, i);
                    image.Save(buffer, format);
                    frames[i] = Image.FromStream(buffer);
                }
            }
            return frames;
        }

        /// <summary>
        /// Convierte el word ubicado en la ruta a un PDF
        /// </summary>
        /// <param name="wordPath"></param>
        /// <param name="PDFPath"></param>
        public void ConvertExcelToPDF(String wordPath, String PDFPath)
        {
            //Create a new document 
            Workbook workbook = null;

            try
            {
                workbook = new Workbook();
                try
                {
                    workbook.LoadFromFile(wordPath, ExcelVersion.Version2010);
                }
                catch (Exception)
                {
                    try
                    {
                        workbook.LoadFromFile(wordPath, ExcelVersion.Version2013);
                    }
                    catch (Exception)
                    {
                        try
                        {
                            workbook.LoadFromFile(wordPath, ExcelVersion.Version2007);
                        }
                        catch (Exception)
                        {
                            try
                            {
                                workbook.LoadFromFile(wordPath, ExcelVersion.Version97to2003);
                            }
                            catch (Exception)
                            {
                                try
                                {
                                    workbook.LoadFromFile(wordPath, ExcelVersion.ODS);
                                }
                                catch (Exception)
                                {
                                    try
                                    {
                                        workbook.LoadFromFile(wordPath, ExcelVersion.Xlsb2007);
                                    }
                                    catch (Exception)
                                    {
                                        try
                                        {
                                            workbook.LoadFromFile(wordPath, ExcelVersion.Xlsb2010);
                                        }
                                        catch (Exception)
                                        {
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                //Save doc file to pdf.
                workbook.SaveToFile(PDFPath, Spire.Xls.FileFormat.PDF);
            }
            finally
            {
                if (workbook != null)
                {
                    workbook = null;
                }
            }
        }



        /// <summary>
        /// Reemplaza texto en un documento de word
        /// </summary>
        /// <param name="wordPath">Ruta del documento word</param>
        /// <param name="matchString">Palabra a reemplazar</param>
        /// <param name="newValue">Valor por el cual reemplazar</param>
        /// <param name="caseSensitive">Sensible a mayusculas</param>
        /// <param name="wholeWord">Reemplazar todas las palabras</param>
        public void ReplaceInWord(String wordPath, string matchString, string newValue, bool caseSensitive, bool wholeWord)
        {
            //Create word document
            Document document = null;

            try
            {
                document = new Document();

                //load a document
                document.LoadFromFile(wordPath);

                //Replace text
                document.Replace(matchString, newValue, caseSensitive, wholeWord);

                //Save doc file.
                document.SaveToFile(wordPath, Spire.Doc.FileFormat.Doc);
            }
            finally
            {
                if (document != null)
                {
                    document.Close();
                    document = null;
                }
            }
        }

        /// <summary>
        /// Reemplaza el texto del documento word por los valores obtenidos de dos hashtables.
        /// </summary>
        /// <param name="wordPath">Ruta del documento</param>
        /// <param name="hash1">Key es el valor a buscar y Value el valor a reemplazar</param>
        /// <param name="hash2">Key es el valor a buscar y Value el valor a reemplazar</param>
        /// <remarks>Se utiliza para reemplazar el contenido del word con variables y texto inteligente.
        ///          Un hashtable es para las variables y el otro para texto inteligente, 
        ///          donde Key es el valor a buscar y el Value es el valor a reemplazar.
        /// </remarks>
        public void ReplaceInWord(string wordPath, Hashtable hash1, Hashtable hash2)
        {
            if ((hash1 != null && hash1.Count > 0) || (hash2 != null && hash2.Count > 0))
            {
                Document document = null;
                try
                {
                    //Create word document
                    document = new Document();
                    //load a document
                    document.LoadFromFile(wordPath);
                    //Replace the text
                    if (hash1 != null)
                        foreach (string key in hash1.Keys)
                            if (hash1[key] != null)
                                document.Replace(key, hash1[key].ToString(), true, true);
                    if (hash2 != null)
                        foreach (string key in hash2.Keys)
                            if (hash2[key] != null)
                                document.Replace(key, hash2[key].ToString(), true, true);
                    //Save doc file
                    document.SaveToFile(wordPath, wordPath.EndsWith(".docx") ? Spire.Doc.FileFormat.Docx : Spire.Doc.FileFormat.Doc);
                }
                finally
                {
                    if (document != null)
                    {
                        document.Close();
                        document = null;
                    }
                }
            }
        }

        /// <summary>
        /// Inserta una tabla en un word
        /// </summary>
        /// <param name="wordPath"></param>
        /// <param name="data"></param>
        public void InsertTableInWord(String wordPath, DataTable data, Int32 section, bool fontConfig = false, Font font = null, Color color = new Color(), Color backColor = new Color())
        {
            //Create word document
            Document document = null;

            try
            {
                document = new Document();

                //load a document
                document.LoadFromFile(wordPath);
                if (section == -1)
                {
                    section = document.Sections.Count - 1;
                }

                //Replace text
                addTable(document.Sections[section], data, fontConfig, font,
                    color, backColor);
                //Save doc file.
                document.SaveToFile(wordPath, Spire.Doc.FileFormat.Doc);
            }
            finally
            {
                if (document != null)
                {
                    document.Close();
                    document = null;
                }
            }
        }

        /// <summary>
        /// Agrega una tabla a la seccion
        /// </summary>
        /// <param name="section"></param>
        /// <param name="data"></param>
        private Spire.Doc.Table addTable(Section section, DataTable data, bool fontConfig = false, Font font = null, Color color = new Color(), Color backColor = new Color())
        {
            int offset = 0;
            TextRange text;
            Spire.Doc.Table table = section.AddTable();
            table.ResetCells(data.Rows.Count + 1, data.Columns.Count);

            // ***************** First Row *************************
            TableRow row = table.Rows[0];
            row.IsHeader = true;
            if (fontConfig)
            {
                table.TableFormat.Borders.Color = color;
                row.RowFormat.BackColor = color;
            }
            else
            {
                row.Height = 20;    //unit: point, 1point = 0.3528 mm
                row.HeightType = TableRowHeightType.Exactly;
                row.RowFormat.BackColor = Color.Gray;
            }
            offset = 1;
            for (int i = 0; i < data.Columns.Count; i++)
            {
                row.Cells[i].CellFormat.VerticalAlignment = VerticalAlignment.Middle;
                Paragraph p = row.Cells[i].AddParagraph();
                p.Format.HorizontalAlignment = Spire.Doc.Documents.HorizontalAlignment.Center;
                TextRange txtRange = p.AppendText(data.Columns[i].ColumnName);
                if (fontConfig)
                {
                    /*Si esta habilitada la configuración de fuente invierte el color de fondo con el del texto 
                     *para la cabecera*/
                    txtRange.CharacterFormat.Font = font;
                    txtRange.CharacterFormat.TextColor = backColor;
                }
                txtRange.CharacterFormat.Bold = true;

            }
            for (int r = 0; r < data.Rows.Count; r++)
            {
                TableRow dataRow = table.Rows[r + offset];
                dataRow.Height = 20;
                dataRow.HeightType = TableRowHeightType.Exactly;
                dataRow.RowFormat.BackColor = Color.Empty;
                for (int c = 0; c < data.Columns.Count; c++)
                {
                    dataRow.Cells[c].CellFormat.VerticalAlignment = VerticalAlignment.Middle;
                    text = dataRow.Cells[c].AddParagraph().AppendText(data.Rows[r][c].ToString());
                    if (fontConfig)
                    {
                        dataRow.Cells[c].CellFormat.BackColor = backColor;
                        text.CharacterFormat.Font = font;
                        text.CharacterFormat.TextColor = color;
                    }
                }
            }

            return table;
        }

        /// <summary>
        /// Inserta una cadena de caracteres en un word
        /// </summary>
        /// <param name="wordPath"></param>
        /// <param name="data"></param>
        public void InsertTextInWord(String wordPath, String data, Int32 section, bool textAsTable = false, bool fontConfig = false, Font font = null, Color color = new Color(), Color BackColor = new Color())
        {
            //Create word document
            Document document = null;

            try
            {
                document = new Document();

                //load a document
                document.LoadFromFile(wordPath);
                if (section == -1)
                {
                    section = document.Sections.Count - 1;
                }

                Paragraph p;
                TextRange text;
                if (textAsTable)
                {
                    Table table = document.Sections[section].AddTable();
                    table.TableFormat.Borders.Color = color;
                    table.ResetCells(1, 1);
                    TableRow row = table.Rows[0];
                    row.IsHeader = true;
                    row.RowFormat.BackColor = BackColor;
                    p = row.Cells[0].AddParagraph();
                    text = p.AppendText(data);
                }
                else
                {
                    //Replace text
                    p = document.Sections[section].AddParagraph();
                    text = p.AppendText(data);
                }

                if (fontConfig)
                {
                    text.CharacterFormat.Font = font;
                    text.CharacterFormat.TextColor = color;
                    text.CharacterFormat.TextBackgroundColor = BackColor;
                }

                //Save doc file.

                document.SaveToFile(wordPath, Spire.Doc.FileFormat.Doc);
            }
            finally
            {
                if (document != null)
                {
                    document.Close();
                    document = null;
                }
            }
        }

        public void CompleteTableInWord(string wordpath, Int32 pageindex, Int32 tableindex, bool withheader, DataTable dt, bool intable, Int32 rownindex, bool fontConfig = false, Font font = null, Color color = new Color(), Color backColor = new Color())
        {
            Document doc = null;

            try
            {
                doc = new Document(wordpath);
                if (pageindex == -1)
                {
                    pageindex = doc.Sections.Count - 1;
                }
                Section section = doc.Sections[pageindex];

                Spire.Doc.Interface.ITable table;
                if (intable)
                    table = section.Tables[tableindex].Rows[rownindex].Cells[0].Tables[0];
                else
                    table = section.Tables[tableindex];
                //#region replace text
                //TableCell cell1 = table.Rows[1].Cells[0];
                //Paragraph p1 = cell1.Paragraphs[0];
                //p1.Text = "abc";

                //TableCell cell2 = table.Rows[1].Cells[1];
                //Paragraph p2 = cell2.Paragraphs[0];
                //p2.Items.Clear();
                //p2.AppendText("def");

                //TableCell cell3 = table.Rows[1].Cells[2];
                //Paragraph p3 = cell3.Paragraphs[0];
                //(p3.Items[0] as TextRange).Text = "hij";
                //#endregion
                #region add rows

                foreach (DataRow dr in dt.Rows)
                {

                    TableRow newRow = table.AddRow(true, true);
                    TextRange newText;
                    for (int i = 0; i < dt.Columns.Count; i++)
                    {
                        newText = newRow.Cells[i].AddParagraph().AppendText(dr[i].ToString());

                        if (fontConfig)
                        {
                            newRow.Cells[i].CellFormat.BackColor = backColor;
                            newText.CharacterFormat.Font = font;
                            newText.CharacterFormat.TextColor = color;
                        }

                    }

                    table.Rows.Insert(table.Rows.Count - 1, newRow);
                }

                #endregion

                doc.SaveToFile(wordpath);
            }
            finally
            {
                if (doc != null)
                {
                    doc.Close();
                    doc = null;
                }
            }
        }

        /// <summary>
        /// Obtiene el texto de un documento
        /// </summary>
        /// <param name="wordPath">Ruta del documento</param>
        /// <returns>Texto del documento</returns>
        public string GetText(string wordPath)
        {
            Document document = null;

            try
            {
                document = new Document();
                document.LoadFromFile(wordPath);
                return document.GetText();
            }
            finally
            {
                if (document != null)
                {
                    document.Close();
                    document = null;
                }
            }
        }

    }
}
