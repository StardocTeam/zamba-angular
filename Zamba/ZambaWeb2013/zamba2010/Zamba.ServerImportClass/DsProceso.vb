'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class DsProceso
    Inherits DataSet
    
    Private tableDsProceso As DsProcesoDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        RemoveHandler Me.Tables.CollectionChanged, schemaChangedHandler
        RemoveHandler Me.Relations.CollectionChanged, schemaChangedHandler
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("DsProceso")) Is Nothing) Then
                Me.Tables.Add(New DsProcesoDataTable(ds.Tables("DsProceso")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        RemoveHandler Me.Tables.CollectionChanged, schemaChangedHandler
        RemoveHandler Me.Relations.CollectionChanged, schemaChangedHandler
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DsProceso As DsProcesoDataTable
        Get
            Return Me.tableDsProceso
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As DsProceso = CType(MyBase.Clone,DsProceso)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("DsProceso")) Is Nothing) Then
            Me.Tables.Add(New DsProcesoDataTable(ds.Tables("DsProceso")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableDsProceso = CType(Me.Tables("DsProceso"),DsProcesoDataTable)
        If (Not (Me.tableDsProceso) Is Nothing) Then
            Me.tableDsProceso.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsProceso"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DsProceso.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableDsProceso = New DsProcesoDataTable
        Me.Tables.Add(Me.tableDsProceso)
    End Sub
    
    Private Function ShouldSerializeDsProceso() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub DsProcesoRowChangeEventHandler(ByVal sender As Object, ByVal e As DsProcesoRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DsProcesoDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnProcessID As DataColumn
        
        Friend Sub New()
            MyBase.New("DsProceso")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ProcessIDColumn As DataColumn
            Get
                Return Me.columnProcessID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As DsProcesoRow
            Get
                Return CType(Me.Rows(index),DsProcesoRow)
            End Get
        End Property
        
        Public Event DsProcesoRowChanged As DsProcesoRowChangeEventHandler
        
        Public Event DsProcesoRowChanging As DsProcesoRowChangeEventHandler
        
        Public Event DsProcesoRowDeleted As DsProcesoRowChangeEventHandler
        
        Public Event DsProcesoRowDeleting As DsProcesoRowChangeEventHandler
        
        Public Overloads Sub AddDsProcesoRow(ByVal row As DsProcesoRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddDsProcesoRow(ByVal ProcessID As Decimal) As DsProcesoRow
            Dim rowDsProcesoRow As DsProcesoRow = CType(Me.NewRow,DsProcesoRow)
            rowDsProcesoRow.ItemArray = New Object() {ProcessID}
            Me.Rows.Add(rowDsProcesoRow)
            Return rowDsProcesoRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As DsProcesoDataTable = CType(MyBase.Clone,DsProcesoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New DsProcesoDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnProcessID = Me.Columns("ProcessID")
        End Sub
        
        Private Sub InitClass()
            Me.columnProcessID = New DataColumn("ProcessID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnProcessID)
        End Sub
        
        Public Function NewDsProcesoRow() As DsProcesoRow
            Return CType(Me.NewRow,DsProcesoRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New DsProcesoRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DsProcesoRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DsProcesoRowChangedEvent) Is Nothing) Then
                RaiseEvent DsProcesoRowChanged(Me, New DsProcesoRowChangeEvent(CType(e.Row,DsProcesoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DsProcesoRowChangingEvent) Is Nothing) Then
                RaiseEvent DsProcesoRowChanging(Me, New DsProcesoRowChangeEvent(CType(e.Row,DsProcesoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DsProcesoRowDeletedEvent) Is Nothing) Then
                RaiseEvent DsProcesoRowDeleted(Me, New DsProcesoRowChangeEvent(CType(e.Row,DsProcesoRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DsProcesoRowDeletingEvent) Is Nothing) Then
                RaiseEvent DsProcesoRowDeleting(Me, New DsProcesoRowChangeEvent(CType(e.Row,DsProcesoRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveDsProcesoRow(ByVal row As DsProcesoRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DsProcesoRow
        Inherits DataRow
        
        Private tableDsProceso As DsProcesoDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableDsProceso = CType(Me.Table,DsProcesoDataTable)
        End Sub
        
        Public Property ProcessID As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableDsProceso.ProcessIDColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDsProceso.ProcessIDColumn) = value
            End Set
        End Property
        
        Public Function IsProcessIDNull() As Boolean
            Return Me.IsNull(Me.tableDsProceso.ProcessIDColumn)
        End Function
        
        Public Sub SetProcessIDNull()
            Me(Me.tableDsProceso.ProcessIDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class DsProcesoRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As DsProcesoRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As DsProcesoRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As DsProcesoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
