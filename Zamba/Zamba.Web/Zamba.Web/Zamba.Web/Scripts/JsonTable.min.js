var taskid; var variablename; var urlForAjax; $(document).ready(function () {
    if (!Object.keys) {
        Object.keys = function (obj) {
            var keys = []; for (var i in obj) { if (obj.hasOwnProperty(i)) { keys.push(i) } }
            return keys
        }
    }
    jQuery.support.cors = !0; $("#jsonTable").css("cursor", "pointer"); if ($("#jsonTable") != undefined && $("#jsonTable").attr("src") == undefined) { loadFromWeb() }
}); function ProcessAllJsonTables() {
    if (document.getElementById("jsonTable").getAttribute("src") != undefined) {
        variablename = document.getElementById("jsonTable").getAttribute("src"); if (variablename != undefined) { variablename = variablename.substring((variablename.indexOf("(")) + 1, (variablename.lastIndexOf(")"))) }
        taskid = document.getElementById("taskId").getAttribute("value"); if ((taskid != undefined) && (variablename != undefined)) { ajaxGetJson(taskid, variablename) }
    }
}
function loadFromWeb() {
    if ($("#jsonTable") != undefined) {
        urlForAjax = $("#jsonTable").attr("zambaws"); if (urlForAjax != undefined) {
            var queryVariables = GetQueryStringVariables(); taskid = queryVariables.TaskId; variablename = queryVariables.VarName; if (taskid == null) { alert("ERROR AL RECUPERAR TASKID") }
            else { ajaxGetJson(taskid, variablename) }
        } else { }
    }
}
function setWSPath(path) { urlForAjax = path }
function ajaxGetJson(taskid, variablename) { $.ajax({ type: "POST", cache: !1, dataType: "json", contentType: "application/json; charset=utf-8", data: "{ TaskId: " + taskid + ", ZvarName: '" + variablename + "'}", url: urlForAjax + "/GetZVarValue", success: function (data) { loadTable(JSON.parse(data.d)) }, error: function (xhr, ajaxOptions, thrownError) { alert("Error al obtener los datos: " + thrownError + "\nCodigo de error: " + xhr.status) } }) }
function GetQueryStringVariables() {
    var vars = [], hash; var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&'); for (var i = 0; i < hashes.length; i++) { hash = hashes[i].split('='); vars.push(hash[0]); vars[hash[0]] = hash[1] }
    return vars
}
function loadTable(data) {
    var columnsToHide = $("#jsonTable").attr("hidecolumns"); var columnWithLink = $("#jsonTable").attr("columnlink"); if (columnWithLink != undefined) { columnWithLink = validateColumns(columnWithLink) }
    if (columnsToHide != undefined) { columnsToHide = validateColumns(columnsToHide) }
    createTableHeader(data); var dataForTable = validateJson(data); $('#jsonTable').DataTable({ data: dataForTable, columns: createDataForColumns(dataForTable) }); if (columnsToHide != undefined) { HideColummns(columnsToHide) }
    if ((data.length < 2) && (columnWithLink != undefined)) { var link = $("td").parent().children('td:nth(' + parseInt(columnWithLink) + ')')[0].innerText; InspectionClick(link) }
    $("td").click(function () { if (columnWithLink != undefined) { var link = $(this).parent().children('td:nth(' + parseInt(columnWithLink) + ')')[0].innerText; InspectionClick(link) } })
}
var popup; function InspectionClick(link) { var loginurl = ""; if (loginurl != "") { var popup = window.open(loginurl); setTimeout(function () { OpenLink(link, popup) }, 2000) } else { var popup = window.open(link) } }
function OpenLink(link, popup) { popup.location = link; popup.focus() }
function validateColumns(columns) { return columns.replace("]", "").replace("[", "").replace(" ", "").split(",") }
function createTableHeader(data) { $('#jsonTable').append("<thead><tr></tr></thead>"); var jsonstr = []; $.each(data[0], function (key) { $('#jsonTable > thead > tr').append("<th>" + key + "</th>") }) }
function validateJson(data) {
    var datosTablaFinal = []; var jsonKeys; var registro; var columns; for (value in data) {
        registro = data[value]; jsonKeys = Object.keys(registro); columns = {}; for (var i = 0; i < jsonKeys.length; i++) { columns['col' + i.toString()] = registro[jsonKeys[i]] }
        datosTablaFinal.push(columns)
    }
    return datosTablaFinal
}
function createDataForColumns(data) { var jsonstr = []; var column = 0; $.each(data[0], function (key) { jsonstr.push('{\"data\": \"' + key + '\"}'); column++ }); jsonstr = jsonstr.join(); jsonstr = '[' + jsonstr + ']'; return JSON.parse(jsonstr) }
function HideColummns(columnsToHide) { for (var i = 0; i <= columnsToHide.length; i++) { $('#jsonTable > tbody  > tr').each(function () { $(this).children('td:nth(' + parseInt(columnsToHide[i]) + ')').hide() }); $('#jsonTable > thead >tr').children('th:nth(' + parseInt(columnsToHide[i]) + ')').hide() } }