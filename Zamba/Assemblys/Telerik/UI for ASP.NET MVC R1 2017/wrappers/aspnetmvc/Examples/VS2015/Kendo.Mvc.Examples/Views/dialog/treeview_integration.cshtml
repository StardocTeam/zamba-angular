<div id="example">
    @(Html.Kendo().Dialog()
        .Name("dialog")
        .Visible(false)
        .Title("Employees")
        .Content(
            "<div class='k-textbox k-space-right search-wrapper'><input id='employees-search' type='text'  placeholder='Search employees'/><span class='k-icon k-i-search'></span></div>" +             
            "<div class='select-all-wrapper'><input data-role='checkbox'  onclick='selectAll(this)' type='checkbox' class='k-checkbox' id='_selectAllEmployees'><label class='k-checkbox-label' for='_selectAllEmployees'>Select all employees</label><span class='selected-count'></span></div>" +
            Html.Kendo().TreeView()
                .Name("treeview")
                .DataTextField("Name")
                .LoadOnDemand(false)
                .ExpandAll(true)
                .Checkboxes(check=>check.Name("checkedItems"))
                .AutoScroll(false)                
                .CheckboxTemplate("<input type='checkbox' name='checkedNodes' tabindex='-1' #= (item.enabled === false) ? 'disabled' : '' # #= item.checked ? 'checked' : '' #  id='_#= item.uid #' class='k-checkbox' />" +
       "<label for='_#= item.uid #' class='k-checkbox-label'></label>")
                .DataSource(dataSource => dataSource
                    .Read(read => read
                        .Action("Employees", "TreeView")
                    )
                )
                .Events(ev => ev.DataBound("treeViewDataBound").Check("treeViewCheck"))
                .ToHtmlString()
        )
        .Width(400)
        .Height(500)
        .Modal(false)
        .Closable(true)
        .Actions(actions =>
        {
            actions.Add().Text("Cancel");
            actions.Add().Text("OK").Primary(true).Action("actionOK");
        })
        .Events(ev => ev.InitOpen("initOpen").Open("dialogOpen"))
    )

    <div id="add-product" class="demo-section k-content">
        <p class="title">Employees</p>
        <div id="result"></div>
        @Html.Kendo().Button().HtmlAttributes(new { type = "button", @class = "k-primary" }).Name("openDialogBtn").Content("Pick employees").Events(ev => ev.Click("openDialog"))
    </div>
</div>

<script>
    function treeViewDataBound(e) {
        e.sender.expand(e.node);
    }

    function initOpen(e) {
        $("#employees-search").on("input", function () {
            var query = this.value.toLowerCase();
            var dataSource = $("#treeview").data("kendoTreeView").dataSource;
            filter(dataSource, query);
            matchColors(query);
        });
    }

    function dialogOpen(e) {
        setTimeout(function () {
            $("#employees-search").focus().select();
        })
    }
    function openDialog(e) {
        $("#dialog").data("kendoDialog").open();
    }
    
    function actionOK(e) {
        var treeView = $("#treeview").data("kendoTreeView");
        var checkedNodes = getCheckedItems(treeView);
        updateResult(checkedNodes);
    }

    function updateResult(checkedNodes) {
        if (checkedNodes.length > 0) {
            var result = "";
            for (var i = 0; i < checkedNodes.length; i++) {
                result += "<span class='selectedName'>" + checkedNodes[i].Name + "</span>";
            }
        } else {
            result = "No employees selected.";
        }

        $("#result").html(result);
    }
    function treeViewCheck(e) {
        setTimeout(function () {
            updateSelectedCount(e.sender);
        })
    }

    function selectAll(sender) {
        $("#treeview .k-checkbox").removeAttr("checked").prop("checked", sender.checked);
        $("#treeview .k-checkbox").trigger("change");
    }

    function updateSelectedCount(treeView) {
        $(".selected-count").html(getCheckedItems(treeView).length + " Employees selected");
    }
    
    function getCheckedItems(treeview) {
        var nodes = treeview.dataSource.view();
        return getCheckedNodes(nodes);
    }

    function getCheckedNodes(nodes) {
        var node, childCheckedNodes;
        var checkedNodes = [];

        for (var i = 0; i < nodes.length; i++) {
            node = nodes[i];
            if (node.checked) {
                checkedNodes.push(node);
            }

            if (node.hasChildren) {
                childCheckedNodes = getCheckedNodes(node.children.view());
                if (childCheckedNodes.length > 0) {
                    checkedNodes = checkedNodes.concat(childCheckedNodes);
                }
            }

        }

        return checkedNodes;
    }

    function filter(dataSource, query) {
        var hasVisibleChildren = false;
        var data = dataSource instanceof kendo.data.HierarchicalDataSource && dataSource.data();

        for (var i = 0; i < data.length; i++) {
            var item = data[i];
            var text = item.Name.toLowerCase();
            var itemVisible =
                query === true // parent already matches
                || query === "" // query is empty
                || text.indexOf(query) >= 0; // item text matches query

            var anyVisibleChildren = filter(item.children, itemVisible || query); // pass true if parent matches

            hasVisibleChildren = hasVisibleChildren || anyVisibleChildren || itemVisible;

            item.hidden = !itemVisible && !anyVisibleChildren;
        }

        if (data) {
            // re-apply filter on children
            dataSource.filter({ field: "hidden", operator: "neq", value: true });
        }

        return hasVisibleChildren;
    }

    function matchColors(query, element) {
        $("#treeview .k-in:containsIgnoreCase('" + query + "')").each(function () {
            var index = $(this).html().toLowerCase().indexOf(query.toLowerCase());
            var length = query.length;
            var original = $(this).html().substr(index, length);
            var newText = $(this).html().replace(original, "<span class='query-match'>" + original + "</span>");
            $(this).html(newText);
        });
    }

    $.expr[':'].containsIgnoreCase = function (n, i, m) {
        return jQuery(n).text().toUpperCase().indexOf(m[3].toUpperCase()) >= 0;
    };
</script>
<style>
    #example {
        min-height: 200px;
    }

        #example .title {
            font-weight: bold;
            margin-bottom: 25px;
        }

    .search-wrapper {
        width: 100%;
    }
    .query-match {
        color: red;
    }
    .select-all-wrapper {
        margin-top: 20px;
        margin-bottom: 20px;
    }

    .selected-count {
        float: right;
        color: #aaa;
    }
    .k-treeview {
        border-width: 1px!important;
        padding: 5px;
    }
    .selectedName {
        padding: 5px 10px;
        background: #aaa;
        color: white;
        float: left;
        margin-right: 5px;
        margin-bottom: 5px;
        border-radius: 10px;
    }

    #result {
        padding-bottom: 15px;
    }

        #result:after {
            content: '';
            display: block;
            clear: both;
        }
</style>



