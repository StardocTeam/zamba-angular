//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.1433.
// 
#pragma warning disable 1591

namespace Stardoc.svcWordDocumentUploader {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="FileUploaderSoap", Namespace="http://tempuri.org/")]
    public partial class FileUploader : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback UploadDataAndIndexOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadSoundFileOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public FileUploader() {
            this.Url = global::Stardoc.Properties.Settings.Default.ActiveXTest_svcWordDocumentUploader_FileUploader;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event UploadDataAndIndexCompletedEventHandler UploadDataAndIndexCompleted;
        
        /// <remarks/>
        public event UploadDataCompletedEventHandler UploadDataCompleted;
        
        /// <remarks/>
        public event UploadSoundFileCompletedEventHandler UploadSoundFileCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadDataAndIndex", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadDataAndIndex(int iFileSize, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] arrFileData, string TargetURL, bool bOverwrite) {
            this.Invoke("UploadDataAndIndex", new object[] {
                        iFileSize,
                        arrFileData,
                        TargetURL,
                        bOverwrite});
        }
        
        /// <remarks/>
        public void UploadDataAndIndexAsync(int iFileSize, byte[] arrFileData, string TargetURL, bool bOverwrite) {
            this.UploadDataAndIndexAsync(iFileSize, arrFileData, TargetURL, bOverwrite, null);
        }
        
        /// <remarks/>
        public void UploadDataAndIndexAsync(int iFileSize, byte[] arrFileData, string TargetURL, bool bOverwrite, object userState) {
            if ((this.UploadDataAndIndexOperationCompleted == null)) {
                this.UploadDataAndIndexOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadDataAndIndexOperationCompleted);
            }
            this.InvokeAsync("UploadDataAndIndex", new object[] {
                        iFileSize,
                        arrFileData,
                        TargetURL,
                        bOverwrite}, this.UploadDataAndIndexOperationCompleted, userState);
        }
        
        private void OnUploadDataAndIndexOperationCompleted(object arg) {
            if ((this.UploadDataAndIndexCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadDataAndIndexCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadData(int iFileSize, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] arrFileData, string TargetURL, bool bOverwrite) {
            this.Invoke("UploadData", new object[] {
                        iFileSize,
                        arrFileData,
                        TargetURL,
                        bOverwrite});
        }
        
        /// <remarks/>
        public void UploadDataAsync(int iFileSize, byte[] arrFileData, string TargetURL, bool bOverwrite) {
            this.UploadDataAsync(iFileSize, arrFileData, TargetURL, bOverwrite, null);
        }
        
        /// <remarks/>
        public void UploadDataAsync(int iFileSize, byte[] arrFileData, string TargetURL, bool bOverwrite, object userState) {
            if ((this.UploadDataOperationCompleted == null)) {
                this.UploadDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadDataOperationCompleted);
            }
            this.InvokeAsync("UploadData", new object[] {
                        iFileSize,
                        arrFileData,
                        TargetURL,
                        bOverwrite}, this.UploadDataOperationCompleted, userState);
        }
        
        private void OnUploadDataOperationCompleted(object arg) {
            if ((this.UploadDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadSoundFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadSoundFile(int iFileSize, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] arrFileData, string TargetURL, bool bOverwrite) {
            this.Invoke("UploadSoundFile", new object[] {
                        iFileSize,
                        arrFileData,
                        TargetURL,
                        bOverwrite});
        }
        
        /// <remarks/>
        public void UploadSoundFileAsync(int iFileSize, byte[] arrFileData, string TargetURL, bool bOverwrite) {
            this.UploadSoundFileAsync(iFileSize, arrFileData, TargetURL, bOverwrite, null);
        }
        
        /// <remarks/>
        public void UploadSoundFileAsync(int iFileSize, byte[] arrFileData, string TargetURL, bool bOverwrite, object userState) {
            if ((this.UploadSoundFileOperationCompleted == null)) {
                this.UploadSoundFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadSoundFileOperationCompleted);
            }
            this.InvokeAsync("UploadSoundFile", new object[] {
                        iFileSize,
                        arrFileData,
                        TargetURL,
                        bOverwrite}, this.UploadSoundFileOperationCompleted, userState);
        }
        
        private void OnUploadSoundFileOperationCompleted(object arg) {
            if ((this.UploadSoundFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadSoundFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void UploadDataAndIndexCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void UploadDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void UploadSoundFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591