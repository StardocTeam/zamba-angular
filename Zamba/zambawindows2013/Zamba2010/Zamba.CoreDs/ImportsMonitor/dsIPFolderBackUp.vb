'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.3705.288
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsIPFolderBackUp
    Inherits DataSet
    
    Private tableIP_FolderBackUp As IP_FolderBackUpDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        RemoveHandler Me.Tables.CollectionChanged, schemaChangedHandler
        RemoveHandler Me.Relations.CollectionChanged, schemaChangedHandler
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As New DataSet()
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("IP_FolderBackUp")) Is Nothing) Then
                Me.Tables.Add(New IP_FolderBackUpDataTable(ds.Tables("IP_FolderBackUp")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        RemoveHandler Me.Tables.CollectionChanged, schemaChangedHandler
        RemoveHandler Me.Relations.CollectionChanged, schemaChangedHandler
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property IP_FolderBackUp As IP_FolderBackUpDataTable
        Get
            Return Me.tableIP_FolderBackUp
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsIPFolderBackUp = CType(MyBase.Clone,dsIPFolderBackUp)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As New DataSet()
        ds.ReadXml(reader)
        If (Not (ds.Tables("IP_FolderBackUp")) Is Nothing) Then
            Me.Tables.Add(New IP_FolderBackUpDataTable(ds.Tables("IP_FolderBackUp")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableIP_FolderBackUp = CType(Me.Tables("IP_FolderBackUp"),IP_FolderBackUpDataTable)
        If (Not (Me.tableIP_FolderBackUp) Is Nothing) Then
            Me.tableIP_FolderBackUp.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsIPFolderBackUp"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsIPFolderBackUp.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableIP_FolderBackUp = New IP_FolderBackUpDataTable
        Me.Tables.Add(Me.tableIP_FolderBackUp)
    End Sub
    
    Private Function ShouldSerializeIP_FolderBackUp() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub IP_FolderBackUpRowChangeEventHandler(ByVal sender As Object, ByVal e As IP_FolderBackUpRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class IP_FolderBackUpDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnId_Carpeta As DataColumn
        
        Private columnCarpeta_BackUp As DataColumn
        
        Private columnAntes As DataColumn
        
        Friend Sub New()
            MyBase.New("IP_FolderBackUp")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Id_CarpetaColumn As DataColumn
            Get
                Return Me.columnId_Carpeta
            End Get
        End Property
        
        Friend ReadOnly Property Carpeta_BackUpColumn As DataColumn
            Get
                Return Me.columnCarpeta_BackUp
            End Get
        End Property
        
        Friend ReadOnly Property AntesColumn As DataColumn
            Get
                Return Me.columnAntes
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As IP_FolderBackUpRow
            Get
                Return CType(Me.Rows(index),IP_FolderBackUpRow)
            End Get
        End Property
        
        Public Event IP_FolderBackUpRowChanged As IP_FolderBackUpRowChangeEventHandler
        
        Public Event IP_FolderBackUpRowChanging As IP_FolderBackUpRowChangeEventHandler
        
        Public Event IP_FolderBackUpRowDeleted As IP_FolderBackUpRowChangeEventHandler
        
        Public Event IP_FolderBackUpRowDeleting As IP_FolderBackUpRowChangeEventHandler
        
        Public Overloads Sub AddIP_FolderBackUpRow(ByVal row As IP_FolderBackUpRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddIP_FolderBackUpRow(ByVal Id_Carpeta As Decimal, ByVal Carpeta_BackUp As String, ByVal Antes As Boolean) As IP_FolderBackUpRow
            Dim rowIP_FolderBackUpRow As IP_FolderBackUpRow = CType(Me.NewRow,IP_FolderBackUpRow)
            rowIP_FolderBackUpRow.ItemArray = New Object() {Id_Carpeta, Carpeta_BackUp, Antes}
            Me.Rows.Add(rowIP_FolderBackUpRow)
            Return rowIP_FolderBackUpRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As IP_FolderBackUpDataTable = CType(MyBase.Clone,IP_FolderBackUpDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New IP_FolderBackUpDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnId_Carpeta = Me.Columns("Id_Carpeta")
            Me.columnCarpeta_BackUp = Me.Columns("Carpeta_BackUp")
            Me.columnAntes = Me.Columns("Antes")
        End Sub
        
        Private Sub InitClass()
            Me.columnId_Carpeta = New DataColumn("Id_Carpeta", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnId_Carpeta)
            Me.columnCarpeta_BackUp = New DataColumn("Carpeta_BackUp", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCarpeta_BackUp)
            Me.columnAntes = New DataColumn("Antes", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAntes)
            Me.columnId_Carpeta.AllowDBNull = false
            Me.columnCarpeta_BackUp.AllowDBNull = false
            Me.columnAntes.AllowDBNull = false
        End Sub
        
        Public Function NewIP_FolderBackUpRow() As IP_FolderBackUpRow
            Return CType(Me.NewRow,IP_FolderBackUpRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New IP_FolderBackUpRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(IP_FolderBackUpRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IP_FolderBackUpRowChangedEvent) Is Nothing) Then
                RaiseEvent IP_FolderBackUpRowChanged(Me, New IP_FolderBackUpRowChangeEvent(CType(e.Row,IP_FolderBackUpRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IP_FolderBackUpRowChangingEvent) Is Nothing) Then
                RaiseEvent IP_FolderBackUpRowChanging(Me, New IP_FolderBackUpRowChangeEvent(CType(e.Row,IP_FolderBackUpRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IP_FolderBackUpRowDeletedEvent) Is Nothing) Then
                RaiseEvent IP_FolderBackUpRowDeleted(Me, New IP_FolderBackUpRowChangeEvent(CType(e.Row,IP_FolderBackUpRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IP_FolderBackUpRowDeletingEvent) Is Nothing) Then
                RaiseEvent IP_FolderBackUpRowDeleting(Me, New IP_FolderBackUpRowChangeEvent(CType(e.Row,IP_FolderBackUpRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveIP_FolderBackUpRow(ByVal row As IP_FolderBackUpRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class IP_FolderBackUpRow
        Inherits DataRow
        
        Private tableIP_FolderBackUp As IP_FolderBackUpDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableIP_FolderBackUp = CType(Me.Table,IP_FolderBackUpDataTable)
        End Sub
        
        Public Property Id_Carpeta As Decimal
            Get
                Return CType(Me(Me.tableIP_FolderBackUp.Id_CarpetaColumn),Decimal)
            End Get
            Set
                Me(Me.tableIP_FolderBackUp.Id_CarpetaColumn) = value
            End Set
        End Property
        
        Public Property Carpeta_BackUp As String
            Get
                Return CType(Me(Me.tableIP_FolderBackUp.Carpeta_BackUpColumn),String)
            End Get
            Set
                Me(Me.tableIP_FolderBackUp.Carpeta_BackUpColumn) = value
            End Set
        End Property
        
        Public Property Antes As Boolean
            Get
                Return CType(Me(Me.tableIP_FolderBackUp.AntesColumn),Boolean)
            End Get
            Set
                Me(Me.tableIP_FolderBackUp.AntesColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class IP_FolderBackUpRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As IP_FolderBackUpRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As IP_FolderBackUpRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As IP_FolderBackUpRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
