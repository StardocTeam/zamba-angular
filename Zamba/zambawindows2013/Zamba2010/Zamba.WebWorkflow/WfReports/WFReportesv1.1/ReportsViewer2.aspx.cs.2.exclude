using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using Zamba.ReportBuilder.Business;
using Zamba.Core;

public partial class ReportsViewer
    : Page
{
    private const string ZOPT_PREFIX = "ReportViewer_";
    private Dictionary<UserOptTypes, string> _checkedNodes = new Dictionary<UserOptTypes, string>();
    #region Web Form Designer generated code
    override protected void OnInit(EventArgs e)
    {
        //
        // CODEGEN: This call is required by the ASP.NET Web Form Designer.
        //
        InitializeComponent();
        base.OnInit(e);
    }

    /// <summary>
    /// Required method for Designer support - do not modify
    /// the contents of this method with the code editor.
    /// </summary>
    private void InitializeComponent()
    {

    }
    #endregion

    protected void Page_Init(object sender, EventArgs e)
    {

    }
    protected void Page_Load(object sender, EventArgs e)
    {
        if (null != Session["UserId"])
        {
            if (!Page.IsPostBack)
            {
                LoadWorkflowReports();
                LoadUserReports();
                LoadGeneralInfoReports();

                ucTaskCount.Visible = false;
                ucAverageTime.Visible = false;
                ucTaskBalance.Visible = false;
                ucTaskExpire.Visible = false;

                LoadUserState();
                SaveUserState();
                ShowReports();
                LoadGenericReports();
            }


        }
        else
            FormsAuthentication.RedirectToLoginPage();
    }

    private void LoadGeneralInfoReports()
    {
        TreeNode B1 = new TreeNode("Seleccionar Todos", "SeleccionarTodos");
        B1.ShowCheckBox = true;
        DataSet DsQueries = null;
        if (null != Session["UserId"])
        {
            DsQueries = ReportBuilderComponent.GetQueryIdsAndNamesReportGeneral(Int64.Parse(Session["UserId"].ToString()));

            TreeNode QueryNode = new TreeNode("", "");

            if (null != DsQueries && DsQueries.Tables.Count > 0)
            {
                foreach (DataRow Dr in DsQueries.Tables[0].Rows)
                    QueryNode.ChildNodes.Add(new TreeNode(Dr[1].ToString(), UserOptTypes.GeneralReports + Dr[0].ToString()));
            }
            B1.ChildNodes.Add(QueryNode);
            TreeViewGeneralInfoReports.Nodes.Add(B1);
        }
    }
    private void LoadWorkflowReports()
    {

        TreeNode B1 = new TreeNode("Seleccionar Todos", "SeleccionarTodos");
        B1.ShowCheckBox = true;
        TreeNode C1 = new TreeNode("Balances", "Balances");
        C1.ShowCheckBox = false;
        TreeNode D1 = new TreeNode("Balance de tareas por Estado", UserOptTypes.WorkflowReports + "UCTaskBalances");
        TreeNode D2 = new TreeNode("Tiempo promedio de tareas", "WORKFLOWREPORTS§UCAverageTimeInSteps");
        C1.ChildNodes.Add(D1);
        C1.ChildNodes.Add(D2);
        B1.ChildNodes.Add(C1);

        TreeNode C2 = new TreeNode("Vencimiento", "Vencimiento");
        C2.ShowCheckBox = false;
        TreeNode D3 = new TreeNode("Tareas por vencer", UserOptTypes.WorkflowReports + "UCTaskToExpire");
        C2.ChildNodes.Add(D3);
        B1.ChildNodes.Add(C2);

        TreeNode C3 = new TreeNode("Cantidad", "Cantidad");
        C3.ShowCheckBox = false;
        TreeNode D4 = new TreeNode("Cantidad de tareas", UserOptTypes.WorkflowReports + "UCAsignedTasksCount");
        C3.ChildNodes.Add(D4);
        B1.ChildNodes.Add(C3);
        TreeViewWorkflowReports.Nodes.Add(B1);

    }
    private void LoadUserReports()
    {

        TreeNode B1 = new TreeNode("Seleccionar Todos", "SeleccionarTodos");
        B1.ShowCheckBox = true;
        DataSet DsQueries = null;
        if (null != Session["UserId"])
            DsQueries = ReportBuilderComponent.GetQueryIdsAndNames(Int64.Parse(Session["UserId"].ToString()));
        else
            DsQueries = ReportBuilderComponent.GetAllQueryIdsAndNames();

        TreeNode QueryNode = new TreeNode("", "");

        if (null != DsQueries && DsQueries.Tables.Count > 0)
        {
            foreach (DataRow Dr in DsQueries.Tables[0].Rows)
                QueryNode.ChildNodes.Add(new TreeNode(Dr[1].ToString(), UserOptTypes.UserReports + Dr[0].ToString()));
        }
        B1.ChildNodes.Add(QueryNode);
        TreeViewUserReports.Nodes.Add(B1);

    }

   

    protected void OnSelectecQueryChanged(object sender, EventArgs e)
    { }
    protected void Button1_Click(object sender, EventArgs e)
    {
        SaveUserState();
        ShowReports();
        LoadGenericReports();

    }

    private void ShowReports()
    {
        string valuetemp;
        #region "ShowWorkflowReports"
        bool showall = false;
        foreach (TreeNode B in this.TreeViewWorkflowReports.Nodes)
        {
            switch (B.Value)
            {
                case "SeleccionarTodos":
                    showall = B.Checked;
                    break;
                default:
                    break;
            }
            if (showall)

                foreach (TreeNode C in B.ChildNodes)
                    foreach (TreeNode D in C.ChildNodes)
                    {
                        D.Checked = true;

                        ucTaskCount.Visible = true;
                        ucAverageTime.Visible = true;
                        ucTaskBalance.Visible = true;
                        ucTaskExpire.Visible = true;
                    }


            else

                foreach (TreeNode C in B.ChildNodes)

                    foreach (TreeNode D in C.ChildNodes)

                        switch (D.Value)
                        {
                            case "WORKFLOWREPORTS§UCTaskBalances":
                                this.ucTaskBalance.Visible = D.Checked;
                                break;
                            case "WORKFLOWREPORTS§UCTaskToExpire":
                                this.ucTaskExpire.Visible = D.Checked;
                                break;
                            case "WORKFLOWREPORTS§UCAsignedTasksCount":
                                this.ucTaskCount.Visible = D.Checked;
                                break;
                            case "WORKFLOWREPORTS§UCAverageTimeInSteps":
                                this.ucAverageTime.Visible = D.Checked;
                                break;
                        }
        }
        #endregion
        #region "UserReports"
        //showall = false;

        //foreach (TreeNode B in this.TreeViewUserReports.Nodes)
        //{
        //    switch (B.Value)
        //    {
        //        case "SeleccionarTodos":
        //            showall = B.Checked;
        //            break;
        //        default:
        //            break;
        //    }
        //    if (showall)

        //        foreach (TreeNode C in B.ChildNodes)
        //            foreach (TreeNode D in C.ChildNodes)
        //            {
        //                D.Checked = true;
        //                Int32 QueryId;
        //                valuetemp = D.Value;
        //                valuetemp = valuetemp.Replace("USERREPORTS§", string.Empty);
        //                valuetemp = valuetemp.Replace("GENERALINFOREPORTS§", string.Empty);

        //                if (Int32.TryParse(valuetemp, out QueryId))
        //                {
        //                    LoadGenericReport(QueryId, D.Text);
        //                    //upGenericReport.Update();
        //                }
        //            }
        //    else
        //        foreach (TreeNode C in B.ChildNodes)
        //            foreach (TreeNode D in C.ChildNodes)
        //            {
        //                if (D.Checked)
        //                {
        //                    Int32 QueryId;
        //                    valuetemp = D.Value;
        //                    valuetemp = valuetemp.Replace("USERREPORTS§", string.Empty);
        //                    valuetemp = valuetemp.Replace("GENERALINFOREPORTS§", string.Empty);

        //                    if (D.Checked && Int32.TryParse(valuetemp, out QueryId))
        //                    {
        //                        LoadGenericReport(QueryId, D.Text);
        //                        //upGenericReport.Update();
        //                    }
        //                }
        //            }
        //}
        #endregion
        #region "GeneralInfoReports"
        //showall = false;
        //foreach (TreeNode B in this.TreeViewGeneralInfoReports.Nodes)
        //{
        //    switch (B.Value)
        //    {
        //        case "SeleccionarTodos":
        //            showall = B.Checked;
        //            break;
        //        default:
        //            break;
        //    }
        //    if (showall)
        //        foreach (TreeNode C in B.ChildNodes)
        //            foreach (TreeNode D in C.ChildNodes)
        //            {
        //                D.Checked = true;

        //            }
        //    else
        //        foreach (TreeNode C in B.ChildNodes)
        //            foreach (TreeNode D in C.ChildNodes)
        //            {
        //                if (D.Checked)
        //                {

        //                }
        //            }
        //}
        #endregion
    }

    private void LoadGenericReports()
    {
        Dictionary<String, String> Queries = new Dictionary<string, string>();
        DataSet ds = null;
        if (null != Session["UserId"])
            ds = ReportBuilderComponent.GetQueryIdsAndNames(Int64.Parse(Session["UserId"].ToString()));
        else
            ds = ReportBuilderComponent.GetAllQueryIdsAndNames();
        Dictionary<Int32, String> IdsNames = new Dictionary<Int32, String>();

        foreach (DataRow dr in ds.Tables[0].Rows)
            IdsNames.Add(Int32.Parse(dr[0].ToString()), dr[1].ToString());

        Int32 QueryId;
        String CurrentQuery;
        ds = new DataSet();
        ds.Tables.Add(new DataTable());
        ds.Tables[0].Columns.Add(new DataColumn("QueryName"));
        ds.Tables[0].Columns.Add(new DataColumn("Query"));
        //ds.Tables[0].Columns.Add(new DataColumn("GraphicPath"));
        DataSet dstemp;
        string tempvalue;
        foreach ( in _checkedNodes.Keys)
        {
            if (NodeValue.StartsWith("USERREPORTS§"))
            {
                string NodeValue = _checkedNodes;
                tempvalue = NodeValue;
                tempvalue = tempvalue.Replace("USERREPORTS§", string.Empty);

                if (Int32.TryParse(tempvalue, out QueryId) && IdsNames.ContainsKey(Int32.Parse(tempvalue)))
                {
                    CurrentQuery = ReportBuilderComponent.GenerateQueryBuilder(QueryId, true);
                    ds.Tables[0].Rows.Add(ds.Tables[0].NewRow());
                    ds.Tables[0].Rows[ds.Tables[0].Rows.Count - 1][0] = IdsNames[QueryId];
                    ds.Tables[0].Rows[ds.Tables[0].Rows.Count - 1][1] = CurrentQuery;
                }
            }
        }

        rpGeneric.DataSource = ds;
        rpGeneric.DataBind();
    }


    private void LoadReporteGeneral()
    {
        Dictionary<String, String> Queries = new Dictionary<string, string>();
        DataSet ds = null;
        if (null != Session["UserId"])
       {

            ds = ReportBuilderComponent.GetQueryIdsAndNamesReportGeneral(Int64.Parse(Session["UserId"].ToString()));
        
        Dictionary<Int32, String> IdsNames = new Dictionary<Int32, String>();

        foreach (DataRow dr in ds.Tables[0].Rows)
            IdsNames.Add(Int32.Parse(dr[0].ToString()), dr[1].ToString());

        Int32 QueryId;
        String CurrentQuery;
        ds = new DataSet();
        ds.Tables.Add(new DataTable());
        ds.Tables[0].Columns.Add(new DataColumn("QueryName"));
        ds.Tables[0].Columns.Add(new DataColumn("Query"));
        //ds.Tables[0].Columns.Add(new DataColumn("GraphicPath"));
        DataSet dstemp;
        string tempvalue;
        foreach (string NodeValue in _checkedNodes)
        {
            if (NodeValue.StartsWith("GENERALINFOREPORTS§"))
            {
                tempvalue = NodeValue;
                tempvalue = tempvalue.Replace("GENERALINFOREPORTS§", string.Empty);

                if (Int32.TryParse(tempvalue, out QueryId) && IdsNames.ContainsKey(Int32.Parse(tempvalue)))
                {
                    CurrentQuery = ReportBuilderComponent.GenerateQueryBuilderReporteGeneral(QueryId);
                    ds.Tables[0].Rows.Add(ds.Tables[0].NewRow());
                    ds.Tables[0].Rows[ds.Tables[0].Rows.Count - 1][0] = IdsNames[QueryId];
                    ds.Tables[0].Rows[ds.Tables[0].Rows.Count - 1][1] = CurrentQuery;
                }
            }
        }

        rptGeneralInfo.DataSource = ds;
        rptGeneralInfo.DataBind();
     }
           
    }

    //private void LoadGenericReport(Int32 queryId,string QueryName)
    //{
    //    String Query = ReportBuilderComponent.GenerateQueryBuilder(queryId, true);

    //    WfReports_UserControls_UCGenericReport_UcGenericReport GenericReport = new WfReports_UserControls_UCGenericReport_UcGenericReport();
    //    GenericReport.Query = Query;
    //    GenericReport.Title = QueryName;
    //    rpGeneric.Controls.Add(GenericReport);
    //    rpGeneric.DataBind();
    //    //divGenericos.Controls.Add(GenericReport);
    //}


    /*
    protected void TreeView1_SelectedNodeChanged(object sender, EventArgs e)
    {
        switch (this.TreeView1.SelectedValue)
        {
            case "Balances":
            case "UCTaskBalances":
            case "UCAverageTimeInSteps":
                this.TabContainer1.ActiveTabIndex = 0;
                break;
            case "Vencimiento":
            case "UCTaskToExpire":
                this.TabContainer1.ActiveTabIndex = 1;
                break;
            case "Cantidad":
            case "UCAsignedTasksCount":
                this.TabContainer1.ActiveTabIndex = 2;
                break;
            default:
                break;
        }
    }
    private void AddReport(string Report)
    {
        ArrayList Reports;
        Reports = (ArrayList)Session["Reports"];
        if (Reports == null)
        {
            Reports = new ArrayList();
        }
        if (Reports.Contains(Report) == false)
        {
            Reports.Add(Report);
            Session["Reports"] = Reports;

        }
    }
    private void RemoveReport(string Report)
    {
        ArrayList Reports;
        Reports = (ArrayList)Session["Reports"];
        if (Reports == null)
        {
            Reports = new ArrayList();
        }
        if (Reports.Contains(Report) == true)
        {
            Reports.Remove(Report);
            Session["Reports"] = Reports;
        }

    }

    protected void Repeater1_ItemDataBound(object sender, RepeaterItemEventArgs e)
    {
        switch (e.Item.DataItem.ToString())
        {
            //case "UCAverageTimeInStepsByWorkflow":
            //    this.UCAverageTimeInStepsByWorkflow.Visible = true;
            //    break;
            //case "UCAverageTimeInStepsByUser":
            //    this.TabUCAverageTimeInStepsByUser.Visible = true;
            //    break;




            //Control UC = LoadControl("~/UserControls/UCUsersAsigned/UCUsersAsignedByWorkflow.ascx");

            //new UserControls_UCUsersAsigned_UCUsersAsignedByWorkflow();
            //             UCTaskToExpireByWorkflow UC = new UCTaskToExpireByWorkflow();

            //this.Panel1.Controls.Add(UC);
            //this.Panel1.DataBind();
            default:
                break;
        }

        //Microsoft.Reporting.WebForms.ReportViewer RV = (Microsoft.Reporting.WebForms.ReportViewer)e.Item.FindControl("ReportViewer1");
        //RV.LocalReport.ReportPath = ("Reports/rptUsersAsigned.rdlc");    

    }
    */
    protected void btnRefresh_Click(object sender, EventArgs e)
    {
        //UCAsignedTasksCount.DataBind();
        //UCAverageTimeInSteps.DataBind();
        //UCTaskBalances.DataBind();
        //UCTaskToExpire.DataBind();
    }
    protected void TreeView1_SelectedNodeChanged(object sender, EventArgs e)
    {

    }


    //protected void TreeView1_TreeNodeCheckChanged(object sender, TreeNodeEventArgs e)
    //{
    //    Boolean showall = false ;

    //    switch (e.Node.Text.ToUpper())
    //    {
    //        case "SELECCIONAR TODOS":
    //            showall = e.Node.Checked;
    //            break;
    //        default:
    //            break;
    //    }

    //    if (showall)
    //    {
    //        foreach (TreeNode C in TreeView1.Nodes)
    //        {
    //            foreach (TreeNode D in C.ChildNodes)
    //            {
    //                D.Checked = true;
    //                this.iframeTasksBalances.Visible = true;
    //                this.iframeTasksToExpire.Visible = true;
    //                this.iframeAsignedTasks.Visible = true;
    //                this.iframeAverageTime.Visible = true;
    //            }
    //        }
    //    }

    //    foreach (TreeNode B in this.TreeView1.Nodes)
    //    {
    //        switch (B.Value)
    //        {
    //            case "SeleccionarTodos":
    //                B.Checked = false;
    //                break;
    //        }
    //    }
    //}
    protected void TreeView1_TreeNodeCheckChanged(object sender, TreeNodeEventArgs e)
    {
        //Int32 QueryId;

        //if (e.Node.Checked && Int32.TryParse(e.Node.Value, out QueryId))
        //    LoadGenericReport(QueryId);

        //upGenericReport.Update();
    }

    private void LoadUserState()
    {
        StringBuilder QueryBuilder = new StringBuilder();
        QueryBuilder.Append("SELECT UserOpt_Type, Opt_id FROM ZUserOpt where Userid=");
        QueryBuilder.Append(Session["UserId"]);
        QueryBuilder.Append(" and Opt_value = '1'");


        DataSet ds = Zamba.Servers.Server.get_Con(false, false, false).ExecuteDataset(CommandType.Text, QueryBuilder.ToString());
        QueryBuilder.Remove(0, QueryBuilder.Length);

        foreach (DataRow r in ds.Tables[0].Rows)
        {
            if ((UserOptTypes)r["UserOpt_Type"] == UserOptTypes.WorkflowReports)
            {
                foreach (TreeNode node in TreeViewWorkflowReports.Nodes[0].ChildNodes)
                {
                    foreach (TreeNode childNode in node.ChildNodes)
                    {
                        if (childNode.Value == r["Opt_id"])
                        {
                            childNode.Checked = true;
                            break;
                        }
                    }
                }
            }
            else if ((UserOptTypes)r["UserOpt_Type"] == UserOptTypes.UserReports)
            {
                foreach (TreeNode node in TreeViewUserReports.Nodes[0].ChildNodes)
                {
                    foreach (TreeNode childNode in node.ChildNodes)
                    {
                        if (childNode.Value == r["Opt_id"])
                        {
                            childNode.Checked = true;
                            break;
                        }
                    }
                }
            }
            else if ((UserOptTypes)r["UserOpt_Type"] == UserOptTypes.GeneralReports)
            {
                foreach (TreeNode node in TreeViewGeneralInfoReports.Nodes[0].ChildNodes)
                {
                    foreach (TreeNode childNode in node.ChildNodes)
                    {
                        if (childNode.Value == r["Opt_id"])
                        {
                            childNode.Checked = true;
                            break;
                        }

                    }
                }
            }
        }
    }

    private void SaveUserState()
    {
        _checkedNodes.Clear;
        SetCheckedNodes();
        string id;
        StringBuilder sql;
        foreach (UserOptTypes Report in _checkedNodes.Keys)
        {
            sql.Remove(0, sql.Length);
            sql.Append("SELECT count(value) FROM ZUserOpt where Userid= ");
            sql.Append(Session["UserId"]);
            sql.Append("and UserOpt_Type =");
            sql.Append(Report);
            sql.Append(" and Opt_id =");
            sql.Append(_checkedNodes.Values[Report]);

            DataSet ds = Zamba.Servers.Server.get_Con(false, false, false).ExecuteDataset(CommandType.Text, QueryBuilder.ToString());
            if (null != ds.Tables[0] && ds.Tables[0].Rows.Count > 0)
            {
                sql.Remove(0, sql.Length);
                sql.Append("UPDATE ZUserOpt SET ");
                sql.Append(" Opt_Value='1'");
                sql.Append(" where Userid= ");
                sql.Append(Session["UserId"]);
                sql.Append("and UserOpt_Type =");
                sql.Append(Report);
                sql.Append(" and Opt_id =");
                sql.Append(_checkedNodes.Values[Report]);
            }
            else
            {
                sql.Append("INSERT INTO ZUserOpt(Userid, UserOpt_Type, Opt_id, Opt_Value) ");
                sql.Append(" VALUES(");
                sql.Append(Session["UserId"]);
                sql.Append(",");
                sql.Append(Report);
                sql.Append(",");
                sql.Append(_checkedNodes.Values[Report]);
                sql.Append(",");
                sql.Append('1');
            }



        }

        Zamba.Servers.Server.get_Con(false, false, false).ExecuteNonQuery(CommandType.Text, QueryBuilder.ToString());

    }


    void SetCheckedNodes()
    {
        foreach (TreeNode Node in TreeViewWorkflowReports.Nodes[0].ChildNodes)
        {
            if (Node.Checked)
                _checkedNodes.Add(UserOptTypes.WorkflowReports, Node.Value);

            foreach (TreeNode ChildNode in Node.ChildNodes)
            {
                if (ChildNode.Checked)
                    _checkedNodes.Add(UserOptTypes.WorkflowReports, ChildNode.Value);
            }
        }

        foreach (TreeNode Node in TreeViewUserReports.Nodes[0].ChildNodes)
        {
            if (Node.Checked)
                _checkedNodes.Add(UserOptTypes.UserReports, Node.Value);

            foreach (TreeNode ChildNode in Node.ChildNodes)
            {
                if (ChildNode.Checked)
                    _checkedNodes.Add(UserOptTypes.UserReports, ChildNode.Value);
            }
        }

        foreach (TreeNode Node in TreeViewGeneralInfoReports.Nodes[0].ChildNodes)
        {
            if (Node.Checked)
                _checkedNodes.Add(UserOptTypes.GeneralReports, Node.Value);

            foreach (TreeNode ChildNode in Node.ChildNodes)
            {
                if (ChildNode.Checked)
                    _checkedNodes.Add(UserOptTypes.GeneralReports, ChildNode.Value);
            }
        }
    }
}
