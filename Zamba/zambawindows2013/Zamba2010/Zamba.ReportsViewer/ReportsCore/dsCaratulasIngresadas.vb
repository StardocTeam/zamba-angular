'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsCaratulasIngresadas
    Inherits DataSet
    
    Private tableCaratulas As CaratulasDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        RemoveHandler Me.Tables.CollectionChanged, schemaChangedHandler
        RemoveHandler Me.Relations.CollectionChanged, schemaChangedHandler
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Caratulas")) Is Nothing) Then
                Me.Tables.Add(New CaratulasDataTable(ds.Tables("Caratulas")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        RemoveHandler Me.Tables.CollectionChanged, schemaChangedHandler
        RemoveHandler Me.Relations.CollectionChanged, schemaChangedHandler
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Caratulas As CaratulasDataTable
        Get
            Return Me.tableCaratulas
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsCaratulasIngresadas = CType(MyBase.Clone,dsCaratulasIngresadas)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Caratulas")) Is Nothing) Then
            Me.Tables.Add(New CaratulasDataTable(ds.Tables("Caratulas")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableCaratulas = CType(Me.Tables("Caratulas"),CaratulasDataTable)
        If (Not (Me.tableCaratulas) Is Nothing) Then
            Me.tableCaratulas.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsCaratulasIngresadas"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsCaratulasIngresadas.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableCaratulas = New CaratulasDataTable
        Me.Tables.Add(Me.tableCaratulas)
    End Sub
    
    Private Function ShouldSerializeCaratulas() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub CaratulasRowChangeEventHandler(ByVal sender As Object, ByVal e As CaratulasRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CaratulasDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnID As DataColumn
        
        Private columnFecha As DataColumn
        
        Private columnDOC_TYPE_NAME As DataColumn
        
        Private columnDESCRIPTION As DataColumn
        
        Private columnSC As DataColumn
        
        Private columnSCANNEDD As DataColumn
        
        Private columnDOC_ID As DataColumn
        
        Private columnBATCH As DataColumn
        
        Private columnBOX As DataColumn
        
        Friend Sub New()
            MyBase.New("Caratulas")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property IDColumn As DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        Friend ReadOnly Property FechaColumn As DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        Friend ReadOnly Property DOC_TYPE_NAMEColumn As DataColumn
            Get
                Return Me.columnDOC_TYPE_NAME
            End Get
        End Property
        
        Friend ReadOnly Property DESCRIPTIONColumn As DataColumn
            Get
                Return Me.columnDESCRIPTION
            End Get
        End Property
        
        Friend ReadOnly Property SCColumn As DataColumn
            Get
                Return Me.columnSC
            End Get
        End Property
        
        Friend ReadOnly Property SCANNEDDColumn As DataColumn
            Get
                Return Me.columnSCANNEDD
            End Get
        End Property
        
        Friend ReadOnly Property DOC_IDColumn As DataColumn
            Get
                Return Me.columnDOC_ID
            End Get
        End Property
        
        Friend ReadOnly Property BATCHColumn As DataColumn
            Get
                Return Me.columnBATCH
            End Get
        End Property
        
        Friend ReadOnly Property BOXColumn As DataColumn
            Get
                Return Me.columnBOX
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CaratulasRow
            Get
                Return CType(Me.Rows(index),CaratulasRow)
            End Get
        End Property
        
        Public Event CaratulasRowChanged As CaratulasRowChangeEventHandler
        
        Public Event CaratulasRowChanging As CaratulasRowChangeEventHandler
        
        Public Event CaratulasRowDeleted As CaratulasRowChangeEventHandler
        
        Public Event CaratulasRowDeleting As CaratulasRowChangeEventHandler
        
        Public Overloads Sub AddCaratulasRow(ByVal row As CaratulasRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCaratulasRow(ByVal ID As Decimal, ByVal Fecha As Date, ByVal DOC_TYPE_NAME As String, ByVal DESCRIPTION As String, ByVal SC As String, ByVal SCANNEDD As Date, ByVal DOC_ID As Decimal, ByVal BATCH As String, ByVal BOX As Decimal) As CaratulasRow
            Dim rowCaratulasRow As CaratulasRow = CType(Me.NewRow,CaratulasRow)
            rowCaratulasRow.ItemArray = New Object() {ID, Fecha, DOC_TYPE_NAME, DESCRIPTION, SC, SCANNEDD, DOC_ID, BATCH, BOX}
            Me.Rows.Add(rowCaratulasRow)
            Return rowCaratulasRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CaratulasDataTable = CType(MyBase.Clone,CaratulasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CaratulasDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnID = Me.Columns("ID")
            Me.columnFecha = Me.Columns("Fecha")
            Me.columnDOC_TYPE_NAME = Me.Columns("DOC_TYPE_NAME")
            Me.columnDESCRIPTION = Me.Columns("DESCRIPTION")
            Me.columnSC = Me.Columns("SC")
            Me.columnSCANNEDD = Me.Columns("SCANNEDD")
            Me.columnDOC_ID = Me.Columns("DOC_ID")
            Me.columnBATCH = Me.Columns("BATCH")
            Me.columnBOX = Me.Columns("BOX")
        End Sub
        
        Private Sub InitClass()
            Me.columnID = New DataColumn("ID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnID)
            Me.columnFecha = New DataColumn("Fecha", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFecha)
            Me.columnDOC_TYPE_NAME = New DataColumn("DOC_TYPE_NAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOC_TYPE_NAME)
            Me.columnDESCRIPTION = New DataColumn("DESCRIPTION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDESCRIPTION)
            Me.columnSC = New DataColumn("SC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSC)
            Me.columnSCANNEDD = New DataColumn("SCANNEDD", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSCANNEDD)
            Me.columnDOC_ID = New DataColumn("DOC_ID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOC_ID)
            Me.columnBATCH = New DataColumn("BATCH", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBATCH)
            Me.columnBOX = New DataColumn("BOX", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOX)
        End Sub
        
        Public Function NewCaratulasRow() As CaratulasRow
            Return CType(Me.NewRow,CaratulasRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CaratulasRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CaratulasRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CaratulasRowChangedEvent) Is Nothing) Then
                RaiseEvent CaratulasRowChanged(Me, New CaratulasRowChangeEvent(CType(e.Row,CaratulasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CaratulasRowChangingEvent) Is Nothing) Then
                RaiseEvent CaratulasRowChanging(Me, New CaratulasRowChangeEvent(CType(e.Row,CaratulasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CaratulasRowDeletedEvent) Is Nothing) Then
                RaiseEvent CaratulasRowDeleted(Me, New CaratulasRowChangeEvent(CType(e.Row,CaratulasRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CaratulasRowDeletingEvent) Is Nothing) Then
                RaiseEvent CaratulasRowDeleting(Me, New CaratulasRowChangeEvent(CType(e.Row,CaratulasRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCaratulasRow(ByVal row As CaratulasRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CaratulasRow
        Inherits DataRow
        
        Private tableCaratulas As CaratulasDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCaratulas = CType(Me.Table,CaratulasDataTable)
        End Sub
        
        Public Property ID As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCaratulas.IDColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaratulas.IDColumn) = value
            End Set
        End Property
        
        Public Property Fecha As Date
            Get
                Try 
                    Return CType(Me(Me.tableCaratulas.FechaColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaratulas.FechaColumn) = value
            End Set
        End Property
        
        Public Property DOC_TYPE_NAME As String
            Get
                Try 
                    Return CType(Me(Me.tableCaratulas.DOC_TYPE_NAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaratulas.DOC_TYPE_NAMEColumn) = value
            End Set
        End Property
        
        Public Property DESCRIPTION As String
            Get
                Try 
                    Return CType(Me(Me.tableCaratulas.DESCRIPTIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaratulas.DESCRIPTIONColumn) = value
            End Set
        End Property
        
        Public Property SC As String
            Get
                Try 
                    Return CType(Me(Me.tableCaratulas.SCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaratulas.SCColumn) = value
            End Set
        End Property
        
        Public Property SCANNEDD As Date
            Get
                Try 
                    Return CType(Me(Me.tableCaratulas.SCANNEDDColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaratulas.SCANNEDDColumn) = value
            End Set
        End Property
        
        Public Property DOC_ID As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCaratulas.DOC_IDColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaratulas.DOC_IDColumn) = value
            End Set
        End Property
        
        Public Property BATCH As String
            Get
                Try 
                    Return CType(Me(Me.tableCaratulas.BATCHColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaratulas.BATCHColumn) = value
            End Set
        End Property
        
        Public Property BOX As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCaratulas.BOXColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("No se puede obtener el valor porque es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCaratulas.BOXColumn) = value
            End Set
        End Property
        
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableCaratulas.IDColumn)
        End Function
        
        Public Sub SetIDNull()
            Me(Me.tableCaratulas.IDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tableCaratulas.FechaColumn)
        End Function
        
        Public Sub SetFechaNull()
            Me(Me.tableCaratulas.FechaColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOC_TYPE_NAMENull() As Boolean
            Return Me.IsNull(Me.tableCaratulas.DOC_TYPE_NAMEColumn)
        End Function
        
        Public Sub SetDOC_TYPE_NAMENull()
            Me(Me.tableCaratulas.DOC_TYPE_NAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableCaratulas.DESCRIPTIONColumn)
        End Function
        
        Public Sub SetDESCRIPTIONNull()
            Me(Me.tableCaratulas.DESCRIPTIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSCNull() As Boolean
            Return Me.IsNull(Me.tableCaratulas.SCColumn)
        End Function
        
        Public Sub SetSCNull()
            Me(Me.tableCaratulas.SCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSCANNEDDNull() As Boolean
            Return Me.IsNull(Me.tableCaratulas.SCANNEDDColumn)
        End Function
        
        Public Sub SetSCANNEDDNull()
            Me(Me.tableCaratulas.SCANNEDDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOC_IDNull() As Boolean
            Return Me.IsNull(Me.tableCaratulas.DOC_IDColumn)
        End Function
        
        Public Sub SetDOC_IDNull()
            Me(Me.tableCaratulas.DOC_IDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBATCHNull() As Boolean
            Return Me.IsNull(Me.tableCaratulas.BATCHColumn)
        End Function
        
        Public Sub SetBATCHNull()
            Me(Me.tableCaratulas.BATCHColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOXNull() As Boolean
            Return Me.IsNull(Me.tableCaratulas.BOXColumn)
        End Function
        
        Public Sub SetBOXNull()
            Me(Me.tableCaratulas.BOXColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CaratulasRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CaratulasRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CaratulasRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CaratulasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
